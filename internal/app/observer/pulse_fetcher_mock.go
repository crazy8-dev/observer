package observer

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
)

// PulseFetcherMock implements PulseFetcher
type PulseFetcherMock struct {
	t minimock.Tester

	funcFetch          func(p1 insolar.PulseNumber) (pp1 *Pulse, err error)
	inspectFuncFetch   func(p1 insolar.PulseNumber)
	afterFetchCounter  uint64
	beforeFetchCounter uint64
	FetchMock          mPulseFetcherMockFetch

	funcFetchCurrent          func() (p1 insolar.PulseNumber, err error)
	inspectFuncFetchCurrent   func()
	afterFetchCurrentCounter  uint64
	beforeFetchCurrentCounter uint64
	FetchCurrentMock          mPulseFetcherMockFetchCurrent
}

// NewPulseFetcherMock returns a mock for PulseFetcher
func NewPulseFetcherMock(t minimock.Tester) *PulseFetcherMock {
	m := &PulseFetcherMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.FetchMock = mPulseFetcherMockFetch{mock: m}
	m.FetchMock.callArgs = []*PulseFetcherMockFetchParams{}

	m.FetchCurrentMock = mPulseFetcherMockFetchCurrent{mock: m}

	return m
}

type mPulseFetcherMockFetch struct {
	mock               *PulseFetcherMock
	defaultExpectation *PulseFetcherMockFetchExpectation
	expectations       []*PulseFetcherMockFetchExpectation

	callArgs []*PulseFetcherMockFetchParams
	mutex    sync.RWMutex
}

// PulseFetcherMockFetchExpectation specifies expectation struct of the PulseFetcher.Fetch
type PulseFetcherMockFetchExpectation struct {
	mock    *PulseFetcherMock
	params  *PulseFetcherMockFetchParams
	results *PulseFetcherMockFetchResults
	Counter uint64
}

// PulseFetcherMockFetchParams contains parameters of the PulseFetcher.Fetch
type PulseFetcherMockFetchParams struct {
	p1 insolar.PulseNumber
}

// PulseFetcherMockFetchResults contains results of the PulseFetcher.Fetch
type PulseFetcherMockFetchResults struct {
	pp1 *Pulse
	err error
}

// Expect sets up expected params for PulseFetcher.Fetch
func (mmFetch *mPulseFetcherMockFetch) Expect(p1 insolar.PulseNumber) *mPulseFetcherMockFetch {
	if mmFetch.mock.funcFetch != nil {
		mmFetch.mock.t.Fatalf("PulseFetcherMock.Fetch mock is already set by Set")
	}

	if mmFetch.defaultExpectation == nil {
		mmFetch.defaultExpectation = &PulseFetcherMockFetchExpectation{}
	}

	mmFetch.defaultExpectation.params = &PulseFetcherMockFetchParams{p1}
	for _, e := range mmFetch.expectations {
		if minimock.Equal(e.params, mmFetch.defaultExpectation.params) {
			mmFetch.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmFetch.defaultExpectation.params)
		}
	}

	return mmFetch
}

// Inspect accepts an inspector function that has same arguments as the PulseFetcher.Fetch
func (mmFetch *mPulseFetcherMockFetch) Inspect(f func(p1 insolar.PulseNumber)) *mPulseFetcherMockFetch {
	if mmFetch.mock.inspectFuncFetch != nil {
		mmFetch.mock.t.Fatalf("Inspect function is already set for PulseFetcherMock.Fetch")
	}

	mmFetch.mock.inspectFuncFetch = f

	return mmFetch
}

// Return sets up results that will be returned by PulseFetcher.Fetch
func (mmFetch *mPulseFetcherMockFetch) Return(pp1 *Pulse, err error) *PulseFetcherMock {
	if mmFetch.mock.funcFetch != nil {
		mmFetch.mock.t.Fatalf("PulseFetcherMock.Fetch mock is already set by Set")
	}

	if mmFetch.defaultExpectation == nil {
		mmFetch.defaultExpectation = &PulseFetcherMockFetchExpectation{mock: mmFetch.mock}
	}
	mmFetch.defaultExpectation.results = &PulseFetcherMockFetchResults{pp1, err}
	return mmFetch.mock
}

//Set uses given function f to mock the PulseFetcher.Fetch method
func (mmFetch *mPulseFetcherMockFetch) Set(f func(p1 insolar.PulseNumber) (pp1 *Pulse, err error)) *PulseFetcherMock {
	if mmFetch.defaultExpectation != nil {
		mmFetch.mock.t.Fatalf("Default expectation is already set for the PulseFetcher.Fetch method")
	}

	if len(mmFetch.expectations) > 0 {
		mmFetch.mock.t.Fatalf("Some expectations are already set for the PulseFetcher.Fetch method")
	}

	mmFetch.mock.funcFetch = f
	return mmFetch.mock
}

// When sets expectation for the PulseFetcher.Fetch which will trigger the result defined by the following
// Then helper
func (mmFetch *mPulseFetcherMockFetch) When(p1 insolar.PulseNumber) *PulseFetcherMockFetchExpectation {
	if mmFetch.mock.funcFetch != nil {
		mmFetch.mock.t.Fatalf("PulseFetcherMock.Fetch mock is already set by Set")
	}

	expectation := &PulseFetcherMockFetchExpectation{
		mock:   mmFetch.mock,
		params: &PulseFetcherMockFetchParams{p1},
	}
	mmFetch.expectations = append(mmFetch.expectations, expectation)
	return expectation
}

// Then sets up PulseFetcher.Fetch return parameters for the expectation previously defined by the When method
func (e *PulseFetcherMockFetchExpectation) Then(pp1 *Pulse, err error) *PulseFetcherMock {
	e.results = &PulseFetcherMockFetchResults{pp1, err}
	return e.mock
}

// Fetch implements PulseFetcher
func (mmFetch *PulseFetcherMock) Fetch(p1 insolar.PulseNumber) (pp1 *Pulse, err error) {
	mm_atomic.AddUint64(&mmFetch.beforeFetchCounter, 1)
	defer mm_atomic.AddUint64(&mmFetch.afterFetchCounter, 1)

	if mmFetch.inspectFuncFetch != nil {
		mmFetch.inspectFuncFetch(p1)
	}

	params := &PulseFetcherMockFetchParams{p1}

	// Record call args
	mmFetch.FetchMock.mutex.Lock()
	mmFetch.FetchMock.callArgs = append(mmFetch.FetchMock.callArgs, params)
	mmFetch.FetchMock.mutex.Unlock()

	for _, e := range mmFetch.FetchMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp1, e.results.err
		}
	}

	if mmFetch.FetchMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmFetch.FetchMock.defaultExpectation.Counter, 1)
		want := mmFetch.FetchMock.defaultExpectation.params
		got := PulseFetcherMockFetchParams{p1}
		if want != nil && !minimock.Equal(*want, got) {
			mmFetch.t.Errorf("PulseFetcherMock.Fetch got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmFetch.FetchMock.defaultExpectation.results
		if results == nil {
			mmFetch.t.Fatal("No results are set for the PulseFetcherMock.Fetch")
		}
		return (*results).pp1, (*results).err
	}
	if mmFetch.funcFetch != nil {
		return mmFetch.funcFetch(p1)
	}
	mmFetch.t.Fatalf("Unexpected call to PulseFetcherMock.Fetch. %v", p1)
	return
}

// FetchAfterCounter returns a count of finished PulseFetcherMock.Fetch invocations
func (mmFetch *PulseFetcherMock) FetchAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFetch.afterFetchCounter)
}

// FetchBeforeCounter returns a count of PulseFetcherMock.Fetch invocations
func (mmFetch *PulseFetcherMock) FetchBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFetch.beforeFetchCounter)
}

// Calls returns a list of arguments used in each call to PulseFetcherMock.Fetch.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmFetch *mPulseFetcherMockFetch) Calls() []*PulseFetcherMockFetchParams {
	mmFetch.mutex.RLock()

	argCopy := make([]*PulseFetcherMockFetchParams, len(mmFetch.callArgs))
	copy(argCopy, mmFetch.callArgs)

	mmFetch.mutex.RUnlock()

	return argCopy
}

// MinimockFetchDone returns true if the count of the Fetch invocations corresponds
// the number of defined expectations
func (m *PulseFetcherMock) MinimockFetchDone() bool {
	for _, e := range m.FetchMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FetchMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFetchCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFetch != nil && mm_atomic.LoadUint64(&m.afterFetchCounter) < 1 {
		return false
	}
	return true
}

// MinimockFetchInspect logs each unmet expectation
func (m *PulseFetcherMock) MinimockFetchInspect() {
	for _, e := range m.FetchMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PulseFetcherMock.Fetch with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FetchMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFetchCounter) < 1 {
		if m.FetchMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to PulseFetcherMock.Fetch")
		} else {
			m.t.Errorf("Expected call to PulseFetcherMock.Fetch with params: %#v", *m.FetchMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFetch != nil && mm_atomic.LoadUint64(&m.afterFetchCounter) < 1 {
		m.t.Error("Expected call to PulseFetcherMock.Fetch")
	}
}

type mPulseFetcherMockFetchCurrent struct {
	mock               *PulseFetcherMock
	defaultExpectation *PulseFetcherMockFetchCurrentExpectation
	expectations       []*PulseFetcherMockFetchCurrentExpectation
}

// PulseFetcherMockFetchCurrentExpectation specifies expectation struct of the PulseFetcher.FetchCurrent
type PulseFetcherMockFetchCurrentExpectation struct {
	mock *PulseFetcherMock

	results *PulseFetcherMockFetchCurrentResults
	Counter uint64
}

// PulseFetcherMockFetchCurrentResults contains results of the PulseFetcher.FetchCurrent
type PulseFetcherMockFetchCurrentResults struct {
	p1  insolar.PulseNumber
	err error
}

// Expect sets up expected params for PulseFetcher.FetchCurrent
func (mmFetchCurrent *mPulseFetcherMockFetchCurrent) Expect() *mPulseFetcherMockFetchCurrent {
	if mmFetchCurrent.mock.funcFetchCurrent != nil {
		mmFetchCurrent.mock.t.Fatalf("PulseFetcherMock.FetchCurrent mock is already set by Set")
	}

	if mmFetchCurrent.defaultExpectation == nil {
		mmFetchCurrent.defaultExpectation = &PulseFetcherMockFetchCurrentExpectation{}
	}

	return mmFetchCurrent
}

// Inspect accepts an inspector function that has same arguments as the PulseFetcher.FetchCurrent
func (mmFetchCurrent *mPulseFetcherMockFetchCurrent) Inspect(f func()) *mPulseFetcherMockFetchCurrent {
	if mmFetchCurrent.mock.inspectFuncFetchCurrent != nil {
		mmFetchCurrent.mock.t.Fatalf("Inspect function is already set for PulseFetcherMock.FetchCurrent")
	}

	mmFetchCurrent.mock.inspectFuncFetchCurrent = f

	return mmFetchCurrent
}

// Return sets up results that will be returned by PulseFetcher.FetchCurrent
func (mmFetchCurrent *mPulseFetcherMockFetchCurrent) Return(p1 insolar.PulseNumber, err error) *PulseFetcherMock {
	if mmFetchCurrent.mock.funcFetchCurrent != nil {
		mmFetchCurrent.mock.t.Fatalf("PulseFetcherMock.FetchCurrent mock is already set by Set")
	}

	if mmFetchCurrent.defaultExpectation == nil {
		mmFetchCurrent.defaultExpectation = &PulseFetcherMockFetchCurrentExpectation{mock: mmFetchCurrent.mock}
	}
	mmFetchCurrent.defaultExpectation.results = &PulseFetcherMockFetchCurrentResults{p1, err}
	return mmFetchCurrent.mock
}

//Set uses given function f to mock the PulseFetcher.FetchCurrent method
func (mmFetchCurrent *mPulseFetcherMockFetchCurrent) Set(f func() (p1 insolar.PulseNumber, err error)) *PulseFetcherMock {
	if mmFetchCurrent.defaultExpectation != nil {
		mmFetchCurrent.mock.t.Fatalf("Default expectation is already set for the PulseFetcher.FetchCurrent method")
	}

	if len(mmFetchCurrent.expectations) > 0 {
		mmFetchCurrent.mock.t.Fatalf("Some expectations are already set for the PulseFetcher.FetchCurrent method")
	}

	mmFetchCurrent.mock.funcFetchCurrent = f
	return mmFetchCurrent.mock
}

// FetchCurrent implements PulseFetcher
func (mmFetchCurrent *PulseFetcherMock) FetchCurrent() (p1 insolar.PulseNumber, err error) {
	mm_atomic.AddUint64(&mmFetchCurrent.beforeFetchCurrentCounter, 1)
	defer mm_atomic.AddUint64(&mmFetchCurrent.afterFetchCurrentCounter, 1)

	if mmFetchCurrent.inspectFuncFetchCurrent != nil {
		mmFetchCurrent.inspectFuncFetchCurrent()
	}

	if mmFetchCurrent.FetchCurrentMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmFetchCurrent.FetchCurrentMock.defaultExpectation.Counter, 1)

		results := mmFetchCurrent.FetchCurrentMock.defaultExpectation.results
		if results == nil {
			mmFetchCurrent.t.Fatal("No results are set for the PulseFetcherMock.FetchCurrent")
		}
		return (*results).p1, (*results).err
	}
	if mmFetchCurrent.funcFetchCurrent != nil {
		return mmFetchCurrent.funcFetchCurrent()
	}
	mmFetchCurrent.t.Fatalf("Unexpected call to PulseFetcherMock.FetchCurrent.")
	return
}

// FetchCurrentAfterCounter returns a count of finished PulseFetcherMock.FetchCurrent invocations
func (mmFetchCurrent *PulseFetcherMock) FetchCurrentAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFetchCurrent.afterFetchCurrentCounter)
}

// FetchCurrentBeforeCounter returns a count of PulseFetcherMock.FetchCurrent invocations
func (mmFetchCurrent *PulseFetcherMock) FetchCurrentBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFetchCurrent.beforeFetchCurrentCounter)
}

// MinimockFetchCurrentDone returns true if the count of the FetchCurrent invocations corresponds
// the number of defined expectations
func (m *PulseFetcherMock) MinimockFetchCurrentDone() bool {
	for _, e := range m.FetchCurrentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FetchCurrentMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFetchCurrentCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFetchCurrent != nil && mm_atomic.LoadUint64(&m.afterFetchCurrentCounter) < 1 {
		return false
	}
	return true
}

// MinimockFetchCurrentInspect logs each unmet expectation
func (m *PulseFetcherMock) MinimockFetchCurrentInspect() {
	for _, e := range m.FetchCurrentMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to PulseFetcherMock.FetchCurrent")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FetchCurrentMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFetchCurrentCounter) < 1 {
		m.t.Error("Expected call to PulseFetcherMock.FetchCurrent")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFetchCurrent != nil && mm_atomic.LoadUint64(&m.afterFetchCurrentCounter) < 1 {
		m.t.Error("Expected call to PulseFetcherMock.FetchCurrent")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *PulseFetcherMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockFetchInspect()

		m.MinimockFetchCurrentInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *PulseFetcherMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *PulseFetcherMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockFetchDone() &&
		m.MinimockFetchCurrentDone()
}
