package store

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar/record"
)

// RecordSetterMock implements RecordSetter
type RecordSetterMock struct {
	t minimock.Tester

	funcSetRequest          func(ctx context.Context, record record.Material) (err error)
	inspectFuncSetRequest   func(ctx context.Context, record record.Material)
	afterSetRequestCounter  uint64
	beforeSetRequestCounter uint64
	SetRequestMock          mRecordSetterMockSetRequest

	funcSetResult          func(ctx context.Context, record record.Material) (err error)
	inspectFuncSetResult   func(ctx context.Context, record record.Material)
	afterSetResultCounter  uint64
	beforeSetResultCounter uint64
	SetResultMock          mRecordSetterMockSetResult

	funcSetSideEffect          func(ctx context.Context, record record.Material) (err error)
	inspectFuncSetSideEffect   func(ctx context.Context, record record.Material)
	afterSetSideEffectCounter  uint64
	beforeSetSideEffectCounter uint64
	SetSideEffectMock          mRecordSetterMockSetSideEffect
}

// NewRecordSetterMock returns a mock for RecordSetter
func NewRecordSetterMock(t minimock.Tester) *RecordSetterMock {
	m := &RecordSetterMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SetRequestMock = mRecordSetterMockSetRequest{mock: m}
	m.SetRequestMock.callArgs = []*RecordSetterMockSetRequestParams{}

	m.SetResultMock = mRecordSetterMockSetResult{mock: m}
	m.SetResultMock.callArgs = []*RecordSetterMockSetResultParams{}

	m.SetSideEffectMock = mRecordSetterMockSetSideEffect{mock: m}
	m.SetSideEffectMock.callArgs = []*RecordSetterMockSetSideEffectParams{}

	return m
}

type mRecordSetterMockSetRequest struct {
	mock               *RecordSetterMock
	defaultExpectation *RecordSetterMockSetRequestExpectation
	expectations       []*RecordSetterMockSetRequestExpectation

	callArgs []*RecordSetterMockSetRequestParams
	mutex    sync.RWMutex
}

// RecordSetterMockSetRequestExpectation specifies expectation struct of the RecordSetter.SetRequest
type RecordSetterMockSetRequestExpectation struct {
	mock    *RecordSetterMock
	params  *RecordSetterMockSetRequestParams
	results *RecordSetterMockSetRequestResults
	Counter uint64
}

// RecordSetterMockSetRequestParams contains parameters of the RecordSetter.SetRequest
type RecordSetterMockSetRequestParams struct {
	ctx    context.Context
	record record.Material
}

// RecordSetterMockSetRequestResults contains results of the RecordSetter.SetRequest
type RecordSetterMockSetRequestResults struct {
	err error
}

// Expect sets up expected params for RecordSetter.SetRequest
func (mmSetRequest *mRecordSetterMockSetRequest) Expect(ctx context.Context, record record.Material) *mRecordSetterMockSetRequest {
	if mmSetRequest.mock.funcSetRequest != nil {
		mmSetRequest.mock.t.Fatalf("RecordSetterMock.SetRequest mock is already set by Set")
	}

	if mmSetRequest.defaultExpectation == nil {
		mmSetRequest.defaultExpectation = &RecordSetterMockSetRequestExpectation{}
	}

	mmSetRequest.defaultExpectation.params = &RecordSetterMockSetRequestParams{ctx, record}
	for _, e := range mmSetRequest.expectations {
		if minimock.Equal(e.params, mmSetRequest.defaultExpectation.params) {
			mmSetRequest.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetRequest.defaultExpectation.params)
		}
	}

	return mmSetRequest
}

// Inspect accepts an inspector function that has same arguments as the RecordSetter.SetRequest
func (mmSetRequest *mRecordSetterMockSetRequest) Inspect(f func(ctx context.Context, record record.Material)) *mRecordSetterMockSetRequest {
	if mmSetRequest.mock.inspectFuncSetRequest != nil {
		mmSetRequest.mock.t.Fatalf("Inspect function is already set for RecordSetterMock.SetRequest")
	}

	mmSetRequest.mock.inspectFuncSetRequest = f

	return mmSetRequest
}

// Return sets up results that will be returned by RecordSetter.SetRequest
func (mmSetRequest *mRecordSetterMockSetRequest) Return(err error) *RecordSetterMock {
	if mmSetRequest.mock.funcSetRequest != nil {
		mmSetRequest.mock.t.Fatalf("RecordSetterMock.SetRequest mock is already set by Set")
	}

	if mmSetRequest.defaultExpectation == nil {
		mmSetRequest.defaultExpectation = &RecordSetterMockSetRequestExpectation{mock: mmSetRequest.mock}
	}
	mmSetRequest.defaultExpectation.results = &RecordSetterMockSetRequestResults{err}
	return mmSetRequest.mock
}

//Set uses given function f to mock the RecordSetter.SetRequest method
func (mmSetRequest *mRecordSetterMockSetRequest) Set(f func(ctx context.Context, record record.Material) (err error)) *RecordSetterMock {
	if mmSetRequest.defaultExpectation != nil {
		mmSetRequest.mock.t.Fatalf("Default expectation is already set for the RecordSetter.SetRequest method")
	}

	if len(mmSetRequest.expectations) > 0 {
		mmSetRequest.mock.t.Fatalf("Some expectations are already set for the RecordSetter.SetRequest method")
	}

	mmSetRequest.mock.funcSetRequest = f
	return mmSetRequest.mock
}

// When sets expectation for the RecordSetter.SetRequest which will trigger the result defined by the following
// Then helper
func (mmSetRequest *mRecordSetterMockSetRequest) When(ctx context.Context, record record.Material) *RecordSetterMockSetRequestExpectation {
	if mmSetRequest.mock.funcSetRequest != nil {
		mmSetRequest.mock.t.Fatalf("RecordSetterMock.SetRequest mock is already set by Set")
	}

	expectation := &RecordSetterMockSetRequestExpectation{
		mock:   mmSetRequest.mock,
		params: &RecordSetterMockSetRequestParams{ctx, record},
	}
	mmSetRequest.expectations = append(mmSetRequest.expectations, expectation)
	return expectation
}

// Then sets up RecordSetter.SetRequest return parameters for the expectation previously defined by the When method
func (e *RecordSetterMockSetRequestExpectation) Then(err error) *RecordSetterMock {
	e.results = &RecordSetterMockSetRequestResults{err}
	return e.mock
}

// SetRequest implements RecordSetter
func (mmSetRequest *RecordSetterMock) SetRequest(ctx context.Context, record record.Material) (err error) {
	mm_atomic.AddUint64(&mmSetRequest.beforeSetRequestCounter, 1)
	defer mm_atomic.AddUint64(&mmSetRequest.afterSetRequestCounter, 1)

	if mmSetRequest.inspectFuncSetRequest != nil {
		mmSetRequest.inspectFuncSetRequest(ctx, record)
	}

	params := &RecordSetterMockSetRequestParams{ctx, record}

	// Record call args
	mmSetRequest.SetRequestMock.mutex.Lock()
	mmSetRequest.SetRequestMock.callArgs = append(mmSetRequest.SetRequestMock.callArgs, params)
	mmSetRequest.SetRequestMock.mutex.Unlock()

	for _, e := range mmSetRequest.SetRequestMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSetRequest.SetRequestMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetRequest.SetRequestMock.defaultExpectation.Counter, 1)
		want := mmSetRequest.SetRequestMock.defaultExpectation.params
		got := RecordSetterMockSetRequestParams{ctx, record}
		if want != nil && !minimock.Equal(*want, got) {
			mmSetRequest.t.Errorf("RecordSetterMock.SetRequest got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmSetRequest.SetRequestMock.defaultExpectation.results
		if results == nil {
			mmSetRequest.t.Fatal("No results are set for the RecordSetterMock.SetRequest")
		}
		return (*results).err
	}
	if mmSetRequest.funcSetRequest != nil {
		return mmSetRequest.funcSetRequest(ctx, record)
	}
	mmSetRequest.t.Fatalf("Unexpected call to RecordSetterMock.SetRequest. %v %v", ctx, record)
	return
}

// SetRequestAfterCounter returns a count of finished RecordSetterMock.SetRequest invocations
func (mmSetRequest *RecordSetterMock) SetRequestAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetRequest.afterSetRequestCounter)
}

// SetRequestBeforeCounter returns a count of RecordSetterMock.SetRequest invocations
func (mmSetRequest *RecordSetterMock) SetRequestBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetRequest.beforeSetRequestCounter)
}

// Calls returns a list of arguments used in each call to RecordSetterMock.SetRequest.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetRequest *mRecordSetterMockSetRequest) Calls() []*RecordSetterMockSetRequestParams {
	mmSetRequest.mutex.RLock()

	argCopy := make([]*RecordSetterMockSetRequestParams, len(mmSetRequest.callArgs))
	copy(argCopy, mmSetRequest.callArgs)

	mmSetRequest.mutex.RUnlock()

	return argCopy
}

// MinimockSetRequestDone returns true if the count of the SetRequest invocations corresponds
// the number of defined expectations
func (m *RecordSetterMock) MinimockSetRequestDone() bool {
	for _, e := range m.SetRequestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetRequestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetRequestCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetRequest != nil && mm_atomic.LoadUint64(&m.afterSetRequestCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetRequestInspect logs each unmet expectation
func (m *RecordSetterMock) MinimockSetRequestInspect() {
	for _, e := range m.SetRequestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RecordSetterMock.SetRequest with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetRequestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetRequestCounter) < 1 {
		if m.SetRequestMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RecordSetterMock.SetRequest")
		} else {
			m.t.Errorf("Expected call to RecordSetterMock.SetRequest with params: %#v", *m.SetRequestMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetRequest != nil && mm_atomic.LoadUint64(&m.afterSetRequestCounter) < 1 {
		m.t.Error("Expected call to RecordSetterMock.SetRequest")
	}
}

type mRecordSetterMockSetResult struct {
	mock               *RecordSetterMock
	defaultExpectation *RecordSetterMockSetResultExpectation
	expectations       []*RecordSetterMockSetResultExpectation

	callArgs []*RecordSetterMockSetResultParams
	mutex    sync.RWMutex
}

// RecordSetterMockSetResultExpectation specifies expectation struct of the RecordSetter.SetResult
type RecordSetterMockSetResultExpectation struct {
	mock    *RecordSetterMock
	params  *RecordSetterMockSetResultParams
	results *RecordSetterMockSetResultResults
	Counter uint64
}

// RecordSetterMockSetResultParams contains parameters of the RecordSetter.SetResult
type RecordSetterMockSetResultParams struct {
	ctx    context.Context
	record record.Material
}

// RecordSetterMockSetResultResults contains results of the RecordSetter.SetResult
type RecordSetterMockSetResultResults struct {
	err error
}

// Expect sets up expected params for RecordSetter.SetResult
func (mmSetResult *mRecordSetterMockSetResult) Expect(ctx context.Context, record record.Material) *mRecordSetterMockSetResult {
	if mmSetResult.mock.funcSetResult != nil {
		mmSetResult.mock.t.Fatalf("RecordSetterMock.SetResult mock is already set by Set")
	}

	if mmSetResult.defaultExpectation == nil {
		mmSetResult.defaultExpectation = &RecordSetterMockSetResultExpectation{}
	}

	mmSetResult.defaultExpectation.params = &RecordSetterMockSetResultParams{ctx, record}
	for _, e := range mmSetResult.expectations {
		if minimock.Equal(e.params, mmSetResult.defaultExpectation.params) {
			mmSetResult.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetResult.defaultExpectation.params)
		}
	}

	return mmSetResult
}

// Inspect accepts an inspector function that has same arguments as the RecordSetter.SetResult
func (mmSetResult *mRecordSetterMockSetResult) Inspect(f func(ctx context.Context, record record.Material)) *mRecordSetterMockSetResult {
	if mmSetResult.mock.inspectFuncSetResult != nil {
		mmSetResult.mock.t.Fatalf("Inspect function is already set for RecordSetterMock.SetResult")
	}

	mmSetResult.mock.inspectFuncSetResult = f

	return mmSetResult
}

// Return sets up results that will be returned by RecordSetter.SetResult
func (mmSetResult *mRecordSetterMockSetResult) Return(err error) *RecordSetterMock {
	if mmSetResult.mock.funcSetResult != nil {
		mmSetResult.mock.t.Fatalf("RecordSetterMock.SetResult mock is already set by Set")
	}

	if mmSetResult.defaultExpectation == nil {
		mmSetResult.defaultExpectation = &RecordSetterMockSetResultExpectation{mock: mmSetResult.mock}
	}
	mmSetResult.defaultExpectation.results = &RecordSetterMockSetResultResults{err}
	return mmSetResult.mock
}

//Set uses given function f to mock the RecordSetter.SetResult method
func (mmSetResult *mRecordSetterMockSetResult) Set(f func(ctx context.Context, record record.Material) (err error)) *RecordSetterMock {
	if mmSetResult.defaultExpectation != nil {
		mmSetResult.mock.t.Fatalf("Default expectation is already set for the RecordSetter.SetResult method")
	}

	if len(mmSetResult.expectations) > 0 {
		mmSetResult.mock.t.Fatalf("Some expectations are already set for the RecordSetter.SetResult method")
	}

	mmSetResult.mock.funcSetResult = f
	return mmSetResult.mock
}

// When sets expectation for the RecordSetter.SetResult which will trigger the result defined by the following
// Then helper
func (mmSetResult *mRecordSetterMockSetResult) When(ctx context.Context, record record.Material) *RecordSetterMockSetResultExpectation {
	if mmSetResult.mock.funcSetResult != nil {
		mmSetResult.mock.t.Fatalf("RecordSetterMock.SetResult mock is already set by Set")
	}

	expectation := &RecordSetterMockSetResultExpectation{
		mock:   mmSetResult.mock,
		params: &RecordSetterMockSetResultParams{ctx, record},
	}
	mmSetResult.expectations = append(mmSetResult.expectations, expectation)
	return expectation
}

// Then sets up RecordSetter.SetResult return parameters for the expectation previously defined by the When method
func (e *RecordSetterMockSetResultExpectation) Then(err error) *RecordSetterMock {
	e.results = &RecordSetterMockSetResultResults{err}
	return e.mock
}

// SetResult implements RecordSetter
func (mmSetResult *RecordSetterMock) SetResult(ctx context.Context, record record.Material) (err error) {
	mm_atomic.AddUint64(&mmSetResult.beforeSetResultCounter, 1)
	defer mm_atomic.AddUint64(&mmSetResult.afterSetResultCounter, 1)

	if mmSetResult.inspectFuncSetResult != nil {
		mmSetResult.inspectFuncSetResult(ctx, record)
	}

	params := &RecordSetterMockSetResultParams{ctx, record}

	// Record call args
	mmSetResult.SetResultMock.mutex.Lock()
	mmSetResult.SetResultMock.callArgs = append(mmSetResult.SetResultMock.callArgs, params)
	mmSetResult.SetResultMock.mutex.Unlock()

	for _, e := range mmSetResult.SetResultMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSetResult.SetResultMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetResult.SetResultMock.defaultExpectation.Counter, 1)
		want := mmSetResult.SetResultMock.defaultExpectation.params
		got := RecordSetterMockSetResultParams{ctx, record}
		if want != nil && !minimock.Equal(*want, got) {
			mmSetResult.t.Errorf("RecordSetterMock.SetResult got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmSetResult.SetResultMock.defaultExpectation.results
		if results == nil {
			mmSetResult.t.Fatal("No results are set for the RecordSetterMock.SetResult")
		}
		return (*results).err
	}
	if mmSetResult.funcSetResult != nil {
		return mmSetResult.funcSetResult(ctx, record)
	}
	mmSetResult.t.Fatalf("Unexpected call to RecordSetterMock.SetResult. %v %v", ctx, record)
	return
}

// SetResultAfterCounter returns a count of finished RecordSetterMock.SetResult invocations
func (mmSetResult *RecordSetterMock) SetResultAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetResult.afterSetResultCounter)
}

// SetResultBeforeCounter returns a count of RecordSetterMock.SetResult invocations
func (mmSetResult *RecordSetterMock) SetResultBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetResult.beforeSetResultCounter)
}

// Calls returns a list of arguments used in each call to RecordSetterMock.SetResult.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetResult *mRecordSetterMockSetResult) Calls() []*RecordSetterMockSetResultParams {
	mmSetResult.mutex.RLock()

	argCopy := make([]*RecordSetterMockSetResultParams, len(mmSetResult.callArgs))
	copy(argCopy, mmSetResult.callArgs)

	mmSetResult.mutex.RUnlock()

	return argCopy
}

// MinimockSetResultDone returns true if the count of the SetResult invocations corresponds
// the number of defined expectations
func (m *RecordSetterMock) MinimockSetResultDone() bool {
	for _, e := range m.SetResultMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetResultMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetResultCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetResult != nil && mm_atomic.LoadUint64(&m.afterSetResultCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetResultInspect logs each unmet expectation
func (m *RecordSetterMock) MinimockSetResultInspect() {
	for _, e := range m.SetResultMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RecordSetterMock.SetResult with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetResultMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetResultCounter) < 1 {
		if m.SetResultMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RecordSetterMock.SetResult")
		} else {
			m.t.Errorf("Expected call to RecordSetterMock.SetResult with params: %#v", *m.SetResultMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetResult != nil && mm_atomic.LoadUint64(&m.afterSetResultCounter) < 1 {
		m.t.Error("Expected call to RecordSetterMock.SetResult")
	}
}

type mRecordSetterMockSetSideEffect struct {
	mock               *RecordSetterMock
	defaultExpectation *RecordSetterMockSetSideEffectExpectation
	expectations       []*RecordSetterMockSetSideEffectExpectation

	callArgs []*RecordSetterMockSetSideEffectParams
	mutex    sync.RWMutex
}

// RecordSetterMockSetSideEffectExpectation specifies expectation struct of the RecordSetter.SetSideEffect
type RecordSetterMockSetSideEffectExpectation struct {
	mock    *RecordSetterMock
	params  *RecordSetterMockSetSideEffectParams
	results *RecordSetterMockSetSideEffectResults
	Counter uint64
}

// RecordSetterMockSetSideEffectParams contains parameters of the RecordSetter.SetSideEffect
type RecordSetterMockSetSideEffectParams struct {
	ctx    context.Context
	record record.Material
}

// RecordSetterMockSetSideEffectResults contains results of the RecordSetter.SetSideEffect
type RecordSetterMockSetSideEffectResults struct {
	err error
}

// Expect sets up expected params for RecordSetter.SetSideEffect
func (mmSetSideEffect *mRecordSetterMockSetSideEffect) Expect(ctx context.Context, record record.Material) *mRecordSetterMockSetSideEffect {
	if mmSetSideEffect.mock.funcSetSideEffect != nil {
		mmSetSideEffect.mock.t.Fatalf("RecordSetterMock.SetSideEffect mock is already set by Set")
	}

	if mmSetSideEffect.defaultExpectation == nil {
		mmSetSideEffect.defaultExpectation = &RecordSetterMockSetSideEffectExpectation{}
	}

	mmSetSideEffect.defaultExpectation.params = &RecordSetterMockSetSideEffectParams{ctx, record}
	for _, e := range mmSetSideEffect.expectations {
		if minimock.Equal(e.params, mmSetSideEffect.defaultExpectation.params) {
			mmSetSideEffect.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetSideEffect.defaultExpectation.params)
		}
	}

	return mmSetSideEffect
}

// Inspect accepts an inspector function that has same arguments as the RecordSetter.SetSideEffect
func (mmSetSideEffect *mRecordSetterMockSetSideEffect) Inspect(f func(ctx context.Context, record record.Material)) *mRecordSetterMockSetSideEffect {
	if mmSetSideEffect.mock.inspectFuncSetSideEffect != nil {
		mmSetSideEffect.mock.t.Fatalf("Inspect function is already set for RecordSetterMock.SetSideEffect")
	}

	mmSetSideEffect.mock.inspectFuncSetSideEffect = f

	return mmSetSideEffect
}

// Return sets up results that will be returned by RecordSetter.SetSideEffect
func (mmSetSideEffect *mRecordSetterMockSetSideEffect) Return(err error) *RecordSetterMock {
	if mmSetSideEffect.mock.funcSetSideEffect != nil {
		mmSetSideEffect.mock.t.Fatalf("RecordSetterMock.SetSideEffect mock is already set by Set")
	}

	if mmSetSideEffect.defaultExpectation == nil {
		mmSetSideEffect.defaultExpectation = &RecordSetterMockSetSideEffectExpectation{mock: mmSetSideEffect.mock}
	}
	mmSetSideEffect.defaultExpectation.results = &RecordSetterMockSetSideEffectResults{err}
	return mmSetSideEffect.mock
}

//Set uses given function f to mock the RecordSetter.SetSideEffect method
func (mmSetSideEffect *mRecordSetterMockSetSideEffect) Set(f func(ctx context.Context, record record.Material) (err error)) *RecordSetterMock {
	if mmSetSideEffect.defaultExpectation != nil {
		mmSetSideEffect.mock.t.Fatalf("Default expectation is already set for the RecordSetter.SetSideEffect method")
	}

	if len(mmSetSideEffect.expectations) > 0 {
		mmSetSideEffect.mock.t.Fatalf("Some expectations are already set for the RecordSetter.SetSideEffect method")
	}

	mmSetSideEffect.mock.funcSetSideEffect = f
	return mmSetSideEffect.mock
}

// When sets expectation for the RecordSetter.SetSideEffect which will trigger the result defined by the following
// Then helper
func (mmSetSideEffect *mRecordSetterMockSetSideEffect) When(ctx context.Context, record record.Material) *RecordSetterMockSetSideEffectExpectation {
	if mmSetSideEffect.mock.funcSetSideEffect != nil {
		mmSetSideEffect.mock.t.Fatalf("RecordSetterMock.SetSideEffect mock is already set by Set")
	}

	expectation := &RecordSetterMockSetSideEffectExpectation{
		mock:   mmSetSideEffect.mock,
		params: &RecordSetterMockSetSideEffectParams{ctx, record},
	}
	mmSetSideEffect.expectations = append(mmSetSideEffect.expectations, expectation)
	return expectation
}

// Then sets up RecordSetter.SetSideEffect return parameters for the expectation previously defined by the When method
func (e *RecordSetterMockSetSideEffectExpectation) Then(err error) *RecordSetterMock {
	e.results = &RecordSetterMockSetSideEffectResults{err}
	return e.mock
}

// SetSideEffect implements RecordSetter
func (mmSetSideEffect *RecordSetterMock) SetSideEffect(ctx context.Context, record record.Material) (err error) {
	mm_atomic.AddUint64(&mmSetSideEffect.beforeSetSideEffectCounter, 1)
	defer mm_atomic.AddUint64(&mmSetSideEffect.afterSetSideEffectCounter, 1)

	if mmSetSideEffect.inspectFuncSetSideEffect != nil {
		mmSetSideEffect.inspectFuncSetSideEffect(ctx, record)
	}

	params := &RecordSetterMockSetSideEffectParams{ctx, record}

	// Record call args
	mmSetSideEffect.SetSideEffectMock.mutex.Lock()
	mmSetSideEffect.SetSideEffectMock.callArgs = append(mmSetSideEffect.SetSideEffectMock.callArgs, params)
	mmSetSideEffect.SetSideEffectMock.mutex.Unlock()

	for _, e := range mmSetSideEffect.SetSideEffectMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSetSideEffect.SetSideEffectMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetSideEffect.SetSideEffectMock.defaultExpectation.Counter, 1)
		want := mmSetSideEffect.SetSideEffectMock.defaultExpectation.params
		got := RecordSetterMockSetSideEffectParams{ctx, record}
		if want != nil && !minimock.Equal(*want, got) {
			mmSetSideEffect.t.Errorf("RecordSetterMock.SetSideEffect got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmSetSideEffect.SetSideEffectMock.defaultExpectation.results
		if results == nil {
			mmSetSideEffect.t.Fatal("No results are set for the RecordSetterMock.SetSideEffect")
		}
		return (*results).err
	}
	if mmSetSideEffect.funcSetSideEffect != nil {
		return mmSetSideEffect.funcSetSideEffect(ctx, record)
	}
	mmSetSideEffect.t.Fatalf("Unexpected call to RecordSetterMock.SetSideEffect. %v %v", ctx, record)
	return
}

// SetSideEffectAfterCounter returns a count of finished RecordSetterMock.SetSideEffect invocations
func (mmSetSideEffect *RecordSetterMock) SetSideEffectAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetSideEffect.afterSetSideEffectCounter)
}

// SetSideEffectBeforeCounter returns a count of RecordSetterMock.SetSideEffect invocations
func (mmSetSideEffect *RecordSetterMock) SetSideEffectBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetSideEffect.beforeSetSideEffectCounter)
}

// Calls returns a list of arguments used in each call to RecordSetterMock.SetSideEffect.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetSideEffect *mRecordSetterMockSetSideEffect) Calls() []*RecordSetterMockSetSideEffectParams {
	mmSetSideEffect.mutex.RLock()

	argCopy := make([]*RecordSetterMockSetSideEffectParams, len(mmSetSideEffect.callArgs))
	copy(argCopy, mmSetSideEffect.callArgs)

	mmSetSideEffect.mutex.RUnlock()

	return argCopy
}

// MinimockSetSideEffectDone returns true if the count of the SetSideEffect invocations corresponds
// the number of defined expectations
func (m *RecordSetterMock) MinimockSetSideEffectDone() bool {
	for _, e := range m.SetSideEffectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetSideEffectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetSideEffectCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetSideEffect != nil && mm_atomic.LoadUint64(&m.afterSetSideEffectCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetSideEffectInspect logs each unmet expectation
func (m *RecordSetterMock) MinimockSetSideEffectInspect() {
	for _, e := range m.SetSideEffectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RecordSetterMock.SetSideEffect with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetSideEffectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetSideEffectCounter) < 1 {
		if m.SetSideEffectMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RecordSetterMock.SetSideEffect")
		} else {
			m.t.Errorf("Expected call to RecordSetterMock.SetSideEffect with params: %#v", *m.SetSideEffectMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetSideEffect != nil && mm_atomic.LoadUint64(&m.afterSetSideEffectCounter) < 1 {
		m.t.Error("Expected call to RecordSetterMock.SetSideEffect")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RecordSetterMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockSetRequestInspect()

		m.MinimockSetResultInspect()

		m.MinimockSetSideEffectInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RecordSetterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RecordSetterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSetRequestDone() &&
		m.MinimockSetResultDone() &&
		m.MinimockSetSideEffectDone()
}
