package store

// Code generated by http://github.com/gojuno/minimock (3.0.6). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/insolar/insolar/insolar/record"
)

// RecordSetterMock implements RecordSetter
type RecordSetterMock struct {
	t minimock.Tester

	funcSetRequest          func(ctx context.Context, record record.Material) (err error)
	inspectFuncSetRequest   func(ctx context.Context, record record.Material)
	afterSetRequestCounter  uint64
	beforeSetRequestCounter uint64
	SetRequestMock          mRecordSetterMockSetRequest

	funcSetRequestBatch          func(ctx context.Context, requestRecords []record.Material) (err error)
	inspectFuncSetRequestBatch   func(ctx context.Context, requestRecords []record.Material)
	afterSetRequestBatchCounter  uint64
	beforeSetRequestBatchCounter uint64
	SetRequestBatchMock          mRecordSetterMockSetRequestBatch

	funcSetResult          func(ctx context.Context, record record.Material) (err error)
	inspectFuncSetResult   func(ctx context.Context, record record.Material)
	afterSetResultCounter  uint64
	beforeSetResultCounter uint64
	SetResultMock          mRecordSetterMockSetResult

	funcSetResultBatch          func(ctx context.Context, requestRecords []record.Material) (err error)
	inspectFuncSetResultBatch   func(ctx context.Context, requestRecords []record.Material)
	afterSetResultBatchCounter  uint64
	beforeSetResultBatchCounter uint64
	SetResultBatchMock          mRecordSetterMockSetResultBatch

	funcSetSideEffect          func(ctx context.Context, record record.Material) (err error)
	inspectFuncSetSideEffect   func(ctx context.Context, record record.Material)
	afterSetSideEffectCounter  uint64
	beforeSetSideEffectCounter uint64
	SetSideEffectMock          mRecordSetterMockSetSideEffect

	funcSetSideEffectBatch          func(ctx context.Context, requestRecords []record.Material) (err error)
	inspectFuncSetSideEffectBatch   func(ctx context.Context, requestRecords []record.Material)
	afterSetSideEffectBatchCounter  uint64
	beforeSetSideEffectBatchCounter uint64
	SetSideEffectBatchMock          mRecordSetterMockSetSideEffectBatch
}

// NewRecordSetterMock returns a mock for RecordSetter
func NewRecordSetterMock(t minimock.Tester) *RecordSetterMock {
	m := &RecordSetterMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SetRequestMock = mRecordSetterMockSetRequest{mock: m}
	m.SetRequestMock.callArgs = []*RecordSetterMockSetRequestParams{}

	m.SetRequestBatchMock = mRecordSetterMockSetRequestBatch{mock: m}
	m.SetRequestBatchMock.callArgs = []*RecordSetterMockSetRequestBatchParams{}

	m.SetResultMock = mRecordSetterMockSetResult{mock: m}
	m.SetResultMock.callArgs = []*RecordSetterMockSetResultParams{}

	m.SetResultBatchMock = mRecordSetterMockSetResultBatch{mock: m}
	m.SetResultBatchMock.callArgs = []*RecordSetterMockSetResultBatchParams{}

	m.SetSideEffectMock = mRecordSetterMockSetSideEffect{mock: m}
	m.SetSideEffectMock.callArgs = []*RecordSetterMockSetSideEffectParams{}

	m.SetSideEffectBatchMock = mRecordSetterMockSetSideEffectBatch{mock: m}
	m.SetSideEffectBatchMock.callArgs = []*RecordSetterMockSetSideEffectBatchParams{}

	return m
}

type mRecordSetterMockSetRequest struct {
	mock               *RecordSetterMock
	defaultExpectation *RecordSetterMockSetRequestExpectation
	expectations       []*RecordSetterMockSetRequestExpectation

	callArgs []*RecordSetterMockSetRequestParams
	mutex    sync.RWMutex
}

// RecordSetterMockSetRequestExpectation specifies expectation struct of the RecordSetter.SetRequest
type RecordSetterMockSetRequestExpectation struct {
	mock    *RecordSetterMock
	params  *RecordSetterMockSetRequestParams
	results *RecordSetterMockSetRequestResults
	Counter uint64
}

// RecordSetterMockSetRequestParams contains parameters of the RecordSetter.SetRequest
type RecordSetterMockSetRequestParams struct {
	ctx    context.Context
	record record.Material
}

// RecordSetterMockSetRequestResults contains results of the RecordSetter.SetRequest
type RecordSetterMockSetRequestResults struct {
	err error
}

// Expect sets up expected params for RecordSetter.SetRequest
func (mmSetRequest *mRecordSetterMockSetRequest) Expect(ctx context.Context, record record.Material) *mRecordSetterMockSetRequest {
	if mmSetRequest.mock.funcSetRequest != nil {
		mmSetRequest.mock.t.Fatalf("RecordSetterMock.SetRequest mock is already set by Set")
	}

	if mmSetRequest.defaultExpectation == nil {
		mmSetRequest.defaultExpectation = &RecordSetterMockSetRequestExpectation{}
	}

	mmSetRequest.defaultExpectation.params = &RecordSetterMockSetRequestParams{ctx, record}
	for _, e := range mmSetRequest.expectations {
		if minimock.Equal(e.params, mmSetRequest.defaultExpectation.params) {
			mmSetRequest.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetRequest.defaultExpectation.params)
		}
	}

	return mmSetRequest
}

// Inspect accepts an inspector function that has same arguments as the RecordSetter.SetRequest
func (mmSetRequest *mRecordSetterMockSetRequest) Inspect(f func(ctx context.Context, record record.Material)) *mRecordSetterMockSetRequest {
	if mmSetRequest.mock.inspectFuncSetRequest != nil {
		mmSetRequest.mock.t.Fatalf("Inspect function is already set for RecordSetterMock.SetRequest")
	}

	mmSetRequest.mock.inspectFuncSetRequest = f

	return mmSetRequest
}

// Return sets up results that will be returned by RecordSetter.SetRequest
func (mmSetRequest *mRecordSetterMockSetRequest) Return(err error) *RecordSetterMock {
	if mmSetRequest.mock.funcSetRequest != nil {
		mmSetRequest.mock.t.Fatalf("RecordSetterMock.SetRequest mock is already set by Set")
	}

	if mmSetRequest.defaultExpectation == nil {
		mmSetRequest.defaultExpectation = &RecordSetterMockSetRequestExpectation{mock: mmSetRequest.mock}
	}
	mmSetRequest.defaultExpectation.results = &RecordSetterMockSetRequestResults{err}
	return mmSetRequest.mock
}

//Set uses given function f to mock the RecordSetter.SetRequest method
func (mmSetRequest *mRecordSetterMockSetRequest) Set(f func(ctx context.Context, record record.Material) (err error)) *RecordSetterMock {
	if mmSetRequest.defaultExpectation != nil {
		mmSetRequest.mock.t.Fatalf("Default expectation is already set for the RecordSetter.SetRequest method")
	}

	if len(mmSetRequest.expectations) > 0 {
		mmSetRequest.mock.t.Fatalf("Some expectations are already set for the RecordSetter.SetRequest method")
	}

	mmSetRequest.mock.funcSetRequest = f
	return mmSetRequest.mock
}

// When sets expectation for the RecordSetter.SetRequest which will trigger the result defined by the following
// Then helper
func (mmSetRequest *mRecordSetterMockSetRequest) When(ctx context.Context, record record.Material) *RecordSetterMockSetRequestExpectation {
	if mmSetRequest.mock.funcSetRequest != nil {
		mmSetRequest.mock.t.Fatalf("RecordSetterMock.SetRequest mock is already set by Set")
	}

	expectation := &RecordSetterMockSetRequestExpectation{
		mock:   mmSetRequest.mock,
		params: &RecordSetterMockSetRequestParams{ctx, record},
	}
	mmSetRequest.expectations = append(mmSetRequest.expectations, expectation)
	return expectation
}

// Then sets up RecordSetter.SetRequest return parameters for the expectation previously defined by the When method
func (e *RecordSetterMockSetRequestExpectation) Then(err error) *RecordSetterMock {
	e.results = &RecordSetterMockSetRequestResults{err}
	return e.mock
}

// SetRequest implements RecordSetter
func (mmSetRequest *RecordSetterMock) SetRequest(ctx context.Context, record record.Material) (err error) {
	mm_atomic.AddUint64(&mmSetRequest.beforeSetRequestCounter, 1)
	defer mm_atomic.AddUint64(&mmSetRequest.afterSetRequestCounter, 1)

	if mmSetRequest.inspectFuncSetRequest != nil {
		mmSetRequest.inspectFuncSetRequest(ctx, record)
	}

	mm_params := &RecordSetterMockSetRequestParams{ctx, record}

	// Record call args
	mmSetRequest.SetRequestMock.mutex.Lock()
	mmSetRequest.SetRequestMock.callArgs = append(mmSetRequest.SetRequestMock.callArgs, mm_params)
	mmSetRequest.SetRequestMock.mutex.Unlock()

	for _, e := range mmSetRequest.SetRequestMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSetRequest.SetRequestMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetRequest.SetRequestMock.defaultExpectation.Counter, 1)
		mm_want := mmSetRequest.SetRequestMock.defaultExpectation.params
		mm_got := RecordSetterMockSetRequestParams{ctx, record}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSetRequest.t.Errorf("RecordSetterMock.SetRequest got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSetRequest.SetRequestMock.defaultExpectation.results
		if mm_results == nil {
			mmSetRequest.t.Fatal("No results are set for the RecordSetterMock.SetRequest")
		}
		return (*mm_results).err
	}
	if mmSetRequest.funcSetRequest != nil {
		return mmSetRequest.funcSetRequest(ctx, record)
	}
	mmSetRequest.t.Fatalf("Unexpected call to RecordSetterMock.SetRequest. %v %v", ctx, record)
	return
}

// SetRequestAfterCounter returns a count of finished RecordSetterMock.SetRequest invocations
func (mmSetRequest *RecordSetterMock) SetRequestAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetRequest.afterSetRequestCounter)
}

// SetRequestBeforeCounter returns a count of RecordSetterMock.SetRequest invocations
func (mmSetRequest *RecordSetterMock) SetRequestBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetRequest.beforeSetRequestCounter)
}

// Calls returns a list of arguments used in each call to RecordSetterMock.SetRequest.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetRequest *mRecordSetterMockSetRequest) Calls() []*RecordSetterMockSetRequestParams {
	mmSetRequest.mutex.RLock()

	argCopy := make([]*RecordSetterMockSetRequestParams, len(mmSetRequest.callArgs))
	copy(argCopy, mmSetRequest.callArgs)

	mmSetRequest.mutex.RUnlock()

	return argCopy
}

// MinimockSetRequestDone returns true if the count of the SetRequest invocations corresponds
// the number of defined expectations
func (m *RecordSetterMock) MinimockSetRequestDone() bool {
	for _, e := range m.SetRequestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetRequestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetRequestCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetRequest != nil && mm_atomic.LoadUint64(&m.afterSetRequestCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetRequestInspect logs each unmet expectation
func (m *RecordSetterMock) MinimockSetRequestInspect() {
	for _, e := range m.SetRequestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RecordSetterMock.SetRequest with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetRequestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetRequestCounter) < 1 {
		if m.SetRequestMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RecordSetterMock.SetRequest")
		} else {
			m.t.Errorf("Expected call to RecordSetterMock.SetRequest with params: %#v", *m.SetRequestMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetRequest != nil && mm_atomic.LoadUint64(&m.afterSetRequestCounter) < 1 {
		m.t.Error("Expected call to RecordSetterMock.SetRequest")
	}
}

type mRecordSetterMockSetRequestBatch struct {
	mock               *RecordSetterMock
	defaultExpectation *RecordSetterMockSetRequestBatchExpectation
	expectations       []*RecordSetterMockSetRequestBatchExpectation

	callArgs []*RecordSetterMockSetRequestBatchParams
	mutex    sync.RWMutex
}

// RecordSetterMockSetRequestBatchExpectation specifies expectation struct of the RecordSetter.SetRequestBatch
type RecordSetterMockSetRequestBatchExpectation struct {
	mock    *RecordSetterMock
	params  *RecordSetterMockSetRequestBatchParams
	results *RecordSetterMockSetRequestBatchResults
	Counter uint64
}

// RecordSetterMockSetRequestBatchParams contains parameters of the RecordSetter.SetRequestBatch
type RecordSetterMockSetRequestBatchParams struct {
	ctx            context.Context
	requestRecords []record.Material
}

// RecordSetterMockSetRequestBatchResults contains results of the RecordSetter.SetRequestBatch
type RecordSetterMockSetRequestBatchResults struct {
	err error
}

// Expect sets up expected params for RecordSetter.SetRequestBatch
func (mmSetRequestBatch *mRecordSetterMockSetRequestBatch) Expect(ctx context.Context, requestRecords []record.Material) *mRecordSetterMockSetRequestBatch {
	if mmSetRequestBatch.mock.funcSetRequestBatch != nil {
		mmSetRequestBatch.mock.t.Fatalf("RecordSetterMock.SetRequestBatch mock is already set by Set")
	}

	if mmSetRequestBatch.defaultExpectation == nil {
		mmSetRequestBatch.defaultExpectation = &RecordSetterMockSetRequestBatchExpectation{}
	}

	mmSetRequestBatch.defaultExpectation.params = &RecordSetterMockSetRequestBatchParams{ctx, requestRecords}
	for _, e := range mmSetRequestBatch.expectations {
		if minimock.Equal(e.params, mmSetRequestBatch.defaultExpectation.params) {
			mmSetRequestBatch.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetRequestBatch.defaultExpectation.params)
		}
	}

	return mmSetRequestBatch
}

// Inspect accepts an inspector function that has same arguments as the RecordSetter.SetRequestBatch
func (mmSetRequestBatch *mRecordSetterMockSetRequestBatch) Inspect(f func(ctx context.Context, requestRecords []record.Material)) *mRecordSetterMockSetRequestBatch {
	if mmSetRequestBatch.mock.inspectFuncSetRequestBatch != nil {
		mmSetRequestBatch.mock.t.Fatalf("Inspect function is already set for RecordSetterMock.SetRequestBatch")
	}

	mmSetRequestBatch.mock.inspectFuncSetRequestBatch = f

	return mmSetRequestBatch
}

// Return sets up results that will be returned by RecordSetter.SetRequestBatch
func (mmSetRequestBatch *mRecordSetterMockSetRequestBatch) Return(err error) *RecordSetterMock {
	if mmSetRequestBatch.mock.funcSetRequestBatch != nil {
		mmSetRequestBatch.mock.t.Fatalf("RecordSetterMock.SetRequestBatch mock is already set by Set")
	}

	if mmSetRequestBatch.defaultExpectation == nil {
		mmSetRequestBatch.defaultExpectation = &RecordSetterMockSetRequestBatchExpectation{mock: mmSetRequestBatch.mock}
	}
	mmSetRequestBatch.defaultExpectation.results = &RecordSetterMockSetRequestBatchResults{err}
	return mmSetRequestBatch.mock
}

//Set uses given function f to mock the RecordSetter.SetRequestBatch method
func (mmSetRequestBatch *mRecordSetterMockSetRequestBatch) Set(f func(ctx context.Context, requestRecords []record.Material) (err error)) *RecordSetterMock {
	if mmSetRequestBatch.defaultExpectation != nil {
		mmSetRequestBatch.mock.t.Fatalf("Default expectation is already set for the RecordSetter.SetRequestBatch method")
	}

	if len(mmSetRequestBatch.expectations) > 0 {
		mmSetRequestBatch.mock.t.Fatalf("Some expectations are already set for the RecordSetter.SetRequestBatch method")
	}

	mmSetRequestBatch.mock.funcSetRequestBatch = f
	return mmSetRequestBatch.mock
}

// When sets expectation for the RecordSetter.SetRequestBatch which will trigger the result defined by the following
// Then helper
func (mmSetRequestBatch *mRecordSetterMockSetRequestBatch) When(ctx context.Context, requestRecords []record.Material) *RecordSetterMockSetRequestBatchExpectation {
	if mmSetRequestBatch.mock.funcSetRequestBatch != nil {
		mmSetRequestBatch.mock.t.Fatalf("RecordSetterMock.SetRequestBatch mock is already set by Set")
	}

	expectation := &RecordSetterMockSetRequestBatchExpectation{
		mock:   mmSetRequestBatch.mock,
		params: &RecordSetterMockSetRequestBatchParams{ctx, requestRecords},
	}
	mmSetRequestBatch.expectations = append(mmSetRequestBatch.expectations, expectation)
	return expectation
}

// Then sets up RecordSetter.SetRequestBatch return parameters for the expectation previously defined by the When method
func (e *RecordSetterMockSetRequestBatchExpectation) Then(err error) *RecordSetterMock {
	e.results = &RecordSetterMockSetRequestBatchResults{err}
	return e.mock
}

// SetRequestBatch implements RecordSetter
func (mmSetRequestBatch *RecordSetterMock) SetRequestBatch(ctx context.Context, requestRecords []record.Material) (err error) {
	mm_atomic.AddUint64(&mmSetRequestBatch.beforeSetRequestBatchCounter, 1)
	defer mm_atomic.AddUint64(&mmSetRequestBatch.afterSetRequestBatchCounter, 1)

	if mmSetRequestBatch.inspectFuncSetRequestBatch != nil {
		mmSetRequestBatch.inspectFuncSetRequestBatch(ctx, requestRecords)
	}

	mm_params := &RecordSetterMockSetRequestBatchParams{ctx, requestRecords}

	// Record call args
	mmSetRequestBatch.SetRequestBatchMock.mutex.Lock()
	mmSetRequestBatch.SetRequestBatchMock.callArgs = append(mmSetRequestBatch.SetRequestBatchMock.callArgs, mm_params)
	mmSetRequestBatch.SetRequestBatchMock.mutex.Unlock()

	for _, e := range mmSetRequestBatch.SetRequestBatchMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSetRequestBatch.SetRequestBatchMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetRequestBatch.SetRequestBatchMock.defaultExpectation.Counter, 1)
		mm_want := mmSetRequestBatch.SetRequestBatchMock.defaultExpectation.params
		mm_got := RecordSetterMockSetRequestBatchParams{ctx, requestRecords}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSetRequestBatch.t.Errorf("RecordSetterMock.SetRequestBatch got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSetRequestBatch.SetRequestBatchMock.defaultExpectation.results
		if mm_results == nil {
			mmSetRequestBatch.t.Fatal("No results are set for the RecordSetterMock.SetRequestBatch")
		}
		return (*mm_results).err
	}
	if mmSetRequestBatch.funcSetRequestBatch != nil {
		return mmSetRequestBatch.funcSetRequestBatch(ctx, requestRecords)
	}
	mmSetRequestBatch.t.Fatalf("Unexpected call to RecordSetterMock.SetRequestBatch. %v %v", ctx, requestRecords)
	return
}

// SetRequestBatchAfterCounter returns a count of finished RecordSetterMock.SetRequestBatch invocations
func (mmSetRequestBatch *RecordSetterMock) SetRequestBatchAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetRequestBatch.afterSetRequestBatchCounter)
}

// SetRequestBatchBeforeCounter returns a count of RecordSetterMock.SetRequestBatch invocations
func (mmSetRequestBatch *RecordSetterMock) SetRequestBatchBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetRequestBatch.beforeSetRequestBatchCounter)
}

// Calls returns a list of arguments used in each call to RecordSetterMock.SetRequestBatch.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetRequestBatch *mRecordSetterMockSetRequestBatch) Calls() []*RecordSetterMockSetRequestBatchParams {
	mmSetRequestBatch.mutex.RLock()

	argCopy := make([]*RecordSetterMockSetRequestBatchParams, len(mmSetRequestBatch.callArgs))
	copy(argCopy, mmSetRequestBatch.callArgs)

	mmSetRequestBatch.mutex.RUnlock()

	return argCopy
}

// MinimockSetRequestBatchDone returns true if the count of the SetRequestBatch invocations corresponds
// the number of defined expectations
func (m *RecordSetterMock) MinimockSetRequestBatchDone() bool {
	for _, e := range m.SetRequestBatchMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetRequestBatchMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetRequestBatchCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetRequestBatch != nil && mm_atomic.LoadUint64(&m.afterSetRequestBatchCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetRequestBatchInspect logs each unmet expectation
func (m *RecordSetterMock) MinimockSetRequestBatchInspect() {
	for _, e := range m.SetRequestBatchMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RecordSetterMock.SetRequestBatch with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetRequestBatchMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetRequestBatchCounter) < 1 {
		if m.SetRequestBatchMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RecordSetterMock.SetRequestBatch")
		} else {
			m.t.Errorf("Expected call to RecordSetterMock.SetRequestBatch with params: %#v", *m.SetRequestBatchMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetRequestBatch != nil && mm_atomic.LoadUint64(&m.afterSetRequestBatchCounter) < 1 {
		m.t.Error("Expected call to RecordSetterMock.SetRequestBatch")
	}
}

type mRecordSetterMockSetResult struct {
	mock               *RecordSetterMock
	defaultExpectation *RecordSetterMockSetResultExpectation
	expectations       []*RecordSetterMockSetResultExpectation

	callArgs []*RecordSetterMockSetResultParams
	mutex    sync.RWMutex
}

// RecordSetterMockSetResultExpectation specifies expectation struct of the RecordSetter.SetResult
type RecordSetterMockSetResultExpectation struct {
	mock    *RecordSetterMock
	params  *RecordSetterMockSetResultParams
	results *RecordSetterMockSetResultResults
	Counter uint64
}

// RecordSetterMockSetResultParams contains parameters of the RecordSetter.SetResult
type RecordSetterMockSetResultParams struct {
	ctx    context.Context
	record record.Material
}

// RecordSetterMockSetResultResults contains results of the RecordSetter.SetResult
type RecordSetterMockSetResultResults struct {
	err error
}

// Expect sets up expected params for RecordSetter.SetResult
func (mmSetResult *mRecordSetterMockSetResult) Expect(ctx context.Context, record record.Material) *mRecordSetterMockSetResult {
	if mmSetResult.mock.funcSetResult != nil {
		mmSetResult.mock.t.Fatalf("RecordSetterMock.SetResult mock is already set by Set")
	}

	if mmSetResult.defaultExpectation == nil {
		mmSetResult.defaultExpectation = &RecordSetterMockSetResultExpectation{}
	}

	mmSetResult.defaultExpectation.params = &RecordSetterMockSetResultParams{ctx, record}
	for _, e := range mmSetResult.expectations {
		if minimock.Equal(e.params, mmSetResult.defaultExpectation.params) {
			mmSetResult.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetResult.defaultExpectation.params)
		}
	}

	return mmSetResult
}

// Inspect accepts an inspector function that has same arguments as the RecordSetter.SetResult
func (mmSetResult *mRecordSetterMockSetResult) Inspect(f func(ctx context.Context, record record.Material)) *mRecordSetterMockSetResult {
	if mmSetResult.mock.inspectFuncSetResult != nil {
		mmSetResult.mock.t.Fatalf("Inspect function is already set for RecordSetterMock.SetResult")
	}

	mmSetResult.mock.inspectFuncSetResult = f

	return mmSetResult
}

// Return sets up results that will be returned by RecordSetter.SetResult
func (mmSetResult *mRecordSetterMockSetResult) Return(err error) *RecordSetterMock {
	if mmSetResult.mock.funcSetResult != nil {
		mmSetResult.mock.t.Fatalf("RecordSetterMock.SetResult mock is already set by Set")
	}

	if mmSetResult.defaultExpectation == nil {
		mmSetResult.defaultExpectation = &RecordSetterMockSetResultExpectation{mock: mmSetResult.mock}
	}
	mmSetResult.defaultExpectation.results = &RecordSetterMockSetResultResults{err}
	return mmSetResult.mock
}

//Set uses given function f to mock the RecordSetter.SetResult method
func (mmSetResult *mRecordSetterMockSetResult) Set(f func(ctx context.Context, record record.Material) (err error)) *RecordSetterMock {
	if mmSetResult.defaultExpectation != nil {
		mmSetResult.mock.t.Fatalf("Default expectation is already set for the RecordSetter.SetResult method")
	}

	if len(mmSetResult.expectations) > 0 {
		mmSetResult.mock.t.Fatalf("Some expectations are already set for the RecordSetter.SetResult method")
	}

	mmSetResult.mock.funcSetResult = f
	return mmSetResult.mock
}

// When sets expectation for the RecordSetter.SetResult which will trigger the result defined by the following
// Then helper
func (mmSetResult *mRecordSetterMockSetResult) When(ctx context.Context, record record.Material) *RecordSetterMockSetResultExpectation {
	if mmSetResult.mock.funcSetResult != nil {
		mmSetResult.mock.t.Fatalf("RecordSetterMock.SetResult mock is already set by Set")
	}

	expectation := &RecordSetterMockSetResultExpectation{
		mock:   mmSetResult.mock,
		params: &RecordSetterMockSetResultParams{ctx, record},
	}
	mmSetResult.expectations = append(mmSetResult.expectations, expectation)
	return expectation
}

// Then sets up RecordSetter.SetResult return parameters for the expectation previously defined by the When method
func (e *RecordSetterMockSetResultExpectation) Then(err error) *RecordSetterMock {
	e.results = &RecordSetterMockSetResultResults{err}
	return e.mock
}

// SetResult implements RecordSetter
func (mmSetResult *RecordSetterMock) SetResult(ctx context.Context, record record.Material) (err error) {
	mm_atomic.AddUint64(&mmSetResult.beforeSetResultCounter, 1)
	defer mm_atomic.AddUint64(&mmSetResult.afterSetResultCounter, 1)

	if mmSetResult.inspectFuncSetResult != nil {
		mmSetResult.inspectFuncSetResult(ctx, record)
	}

	mm_params := &RecordSetterMockSetResultParams{ctx, record}

	// Record call args
	mmSetResult.SetResultMock.mutex.Lock()
	mmSetResult.SetResultMock.callArgs = append(mmSetResult.SetResultMock.callArgs, mm_params)
	mmSetResult.SetResultMock.mutex.Unlock()

	for _, e := range mmSetResult.SetResultMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSetResult.SetResultMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetResult.SetResultMock.defaultExpectation.Counter, 1)
		mm_want := mmSetResult.SetResultMock.defaultExpectation.params
		mm_got := RecordSetterMockSetResultParams{ctx, record}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSetResult.t.Errorf("RecordSetterMock.SetResult got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSetResult.SetResultMock.defaultExpectation.results
		if mm_results == nil {
			mmSetResult.t.Fatal("No results are set for the RecordSetterMock.SetResult")
		}
		return (*mm_results).err
	}
	if mmSetResult.funcSetResult != nil {
		return mmSetResult.funcSetResult(ctx, record)
	}
	mmSetResult.t.Fatalf("Unexpected call to RecordSetterMock.SetResult. %v %v", ctx, record)
	return
}

// SetResultAfterCounter returns a count of finished RecordSetterMock.SetResult invocations
func (mmSetResult *RecordSetterMock) SetResultAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetResult.afterSetResultCounter)
}

// SetResultBeforeCounter returns a count of RecordSetterMock.SetResult invocations
func (mmSetResult *RecordSetterMock) SetResultBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetResult.beforeSetResultCounter)
}

// Calls returns a list of arguments used in each call to RecordSetterMock.SetResult.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetResult *mRecordSetterMockSetResult) Calls() []*RecordSetterMockSetResultParams {
	mmSetResult.mutex.RLock()

	argCopy := make([]*RecordSetterMockSetResultParams, len(mmSetResult.callArgs))
	copy(argCopy, mmSetResult.callArgs)

	mmSetResult.mutex.RUnlock()

	return argCopy
}

// MinimockSetResultDone returns true if the count of the SetResult invocations corresponds
// the number of defined expectations
func (m *RecordSetterMock) MinimockSetResultDone() bool {
	for _, e := range m.SetResultMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetResultMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetResultCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetResult != nil && mm_atomic.LoadUint64(&m.afterSetResultCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetResultInspect logs each unmet expectation
func (m *RecordSetterMock) MinimockSetResultInspect() {
	for _, e := range m.SetResultMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RecordSetterMock.SetResult with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetResultMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetResultCounter) < 1 {
		if m.SetResultMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RecordSetterMock.SetResult")
		} else {
			m.t.Errorf("Expected call to RecordSetterMock.SetResult with params: %#v", *m.SetResultMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetResult != nil && mm_atomic.LoadUint64(&m.afterSetResultCounter) < 1 {
		m.t.Error("Expected call to RecordSetterMock.SetResult")
	}
}

type mRecordSetterMockSetResultBatch struct {
	mock               *RecordSetterMock
	defaultExpectation *RecordSetterMockSetResultBatchExpectation
	expectations       []*RecordSetterMockSetResultBatchExpectation

	callArgs []*RecordSetterMockSetResultBatchParams
	mutex    sync.RWMutex
}

// RecordSetterMockSetResultBatchExpectation specifies expectation struct of the RecordSetter.SetResultBatch
type RecordSetterMockSetResultBatchExpectation struct {
	mock    *RecordSetterMock
	params  *RecordSetterMockSetResultBatchParams
	results *RecordSetterMockSetResultBatchResults
	Counter uint64
}

// RecordSetterMockSetResultBatchParams contains parameters of the RecordSetter.SetResultBatch
type RecordSetterMockSetResultBatchParams struct {
	ctx            context.Context
	requestRecords []record.Material
}

// RecordSetterMockSetResultBatchResults contains results of the RecordSetter.SetResultBatch
type RecordSetterMockSetResultBatchResults struct {
	err error
}

// Expect sets up expected params for RecordSetter.SetResultBatch
func (mmSetResultBatch *mRecordSetterMockSetResultBatch) Expect(ctx context.Context, requestRecords []record.Material) *mRecordSetterMockSetResultBatch {
	if mmSetResultBatch.mock.funcSetResultBatch != nil {
		mmSetResultBatch.mock.t.Fatalf("RecordSetterMock.SetResultBatch mock is already set by Set")
	}

	if mmSetResultBatch.defaultExpectation == nil {
		mmSetResultBatch.defaultExpectation = &RecordSetterMockSetResultBatchExpectation{}
	}

	mmSetResultBatch.defaultExpectation.params = &RecordSetterMockSetResultBatchParams{ctx, requestRecords}
	for _, e := range mmSetResultBatch.expectations {
		if minimock.Equal(e.params, mmSetResultBatch.defaultExpectation.params) {
			mmSetResultBatch.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetResultBatch.defaultExpectation.params)
		}
	}

	return mmSetResultBatch
}

// Inspect accepts an inspector function that has same arguments as the RecordSetter.SetResultBatch
func (mmSetResultBatch *mRecordSetterMockSetResultBatch) Inspect(f func(ctx context.Context, requestRecords []record.Material)) *mRecordSetterMockSetResultBatch {
	if mmSetResultBatch.mock.inspectFuncSetResultBatch != nil {
		mmSetResultBatch.mock.t.Fatalf("Inspect function is already set for RecordSetterMock.SetResultBatch")
	}

	mmSetResultBatch.mock.inspectFuncSetResultBatch = f

	return mmSetResultBatch
}

// Return sets up results that will be returned by RecordSetter.SetResultBatch
func (mmSetResultBatch *mRecordSetterMockSetResultBatch) Return(err error) *RecordSetterMock {
	if mmSetResultBatch.mock.funcSetResultBatch != nil {
		mmSetResultBatch.mock.t.Fatalf("RecordSetterMock.SetResultBatch mock is already set by Set")
	}

	if mmSetResultBatch.defaultExpectation == nil {
		mmSetResultBatch.defaultExpectation = &RecordSetterMockSetResultBatchExpectation{mock: mmSetResultBatch.mock}
	}
	mmSetResultBatch.defaultExpectation.results = &RecordSetterMockSetResultBatchResults{err}
	return mmSetResultBatch.mock
}

//Set uses given function f to mock the RecordSetter.SetResultBatch method
func (mmSetResultBatch *mRecordSetterMockSetResultBatch) Set(f func(ctx context.Context, requestRecords []record.Material) (err error)) *RecordSetterMock {
	if mmSetResultBatch.defaultExpectation != nil {
		mmSetResultBatch.mock.t.Fatalf("Default expectation is already set for the RecordSetter.SetResultBatch method")
	}

	if len(mmSetResultBatch.expectations) > 0 {
		mmSetResultBatch.mock.t.Fatalf("Some expectations are already set for the RecordSetter.SetResultBatch method")
	}

	mmSetResultBatch.mock.funcSetResultBatch = f
	return mmSetResultBatch.mock
}

// When sets expectation for the RecordSetter.SetResultBatch which will trigger the result defined by the following
// Then helper
func (mmSetResultBatch *mRecordSetterMockSetResultBatch) When(ctx context.Context, requestRecords []record.Material) *RecordSetterMockSetResultBatchExpectation {
	if mmSetResultBatch.mock.funcSetResultBatch != nil {
		mmSetResultBatch.mock.t.Fatalf("RecordSetterMock.SetResultBatch mock is already set by Set")
	}

	expectation := &RecordSetterMockSetResultBatchExpectation{
		mock:   mmSetResultBatch.mock,
		params: &RecordSetterMockSetResultBatchParams{ctx, requestRecords},
	}
	mmSetResultBatch.expectations = append(mmSetResultBatch.expectations, expectation)
	return expectation
}

// Then sets up RecordSetter.SetResultBatch return parameters for the expectation previously defined by the When method
func (e *RecordSetterMockSetResultBatchExpectation) Then(err error) *RecordSetterMock {
	e.results = &RecordSetterMockSetResultBatchResults{err}
	return e.mock
}

// SetResultBatch implements RecordSetter
func (mmSetResultBatch *RecordSetterMock) SetResultBatch(ctx context.Context, requestRecords []record.Material) (err error) {
	mm_atomic.AddUint64(&mmSetResultBatch.beforeSetResultBatchCounter, 1)
	defer mm_atomic.AddUint64(&mmSetResultBatch.afterSetResultBatchCounter, 1)

	if mmSetResultBatch.inspectFuncSetResultBatch != nil {
		mmSetResultBatch.inspectFuncSetResultBatch(ctx, requestRecords)
	}

	mm_params := &RecordSetterMockSetResultBatchParams{ctx, requestRecords}

	// Record call args
	mmSetResultBatch.SetResultBatchMock.mutex.Lock()
	mmSetResultBatch.SetResultBatchMock.callArgs = append(mmSetResultBatch.SetResultBatchMock.callArgs, mm_params)
	mmSetResultBatch.SetResultBatchMock.mutex.Unlock()

	for _, e := range mmSetResultBatch.SetResultBatchMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSetResultBatch.SetResultBatchMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetResultBatch.SetResultBatchMock.defaultExpectation.Counter, 1)
		mm_want := mmSetResultBatch.SetResultBatchMock.defaultExpectation.params
		mm_got := RecordSetterMockSetResultBatchParams{ctx, requestRecords}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSetResultBatch.t.Errorf("RecordSetterMock.SetResultBatch got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSetResultBatch.SetResultBatchMock.defaultExpectation.results
		if mm_results == nil {
			mmSetResultBatch.t.Fatal("No results are set for the RecordSetterMock.SetResultBatch")
		}
		return (*mm_results).err
	}
	if mmSetResultBatch.funcSetResultBatch != nil {
		return mmSetResultBatch.funcSetResultBatch(ctx, requestRecords)
	}
	mmSetResultBatch.t.Fatalf("Unexpected call to RecordSetterMock.SetResultBatch. %v %v", ctx, requestRecords)
	return
}

// SetResultBatchAfterCounter returns a count of finished RecordSetterMock.SetResultBatch invocations
func (mmSetResultBatch *RecordSetterMock) SetResultBatchAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetResultBatch.afterSetResultBatchCounter)
}

// SetResultBatchBeforeCounter returns a count of RecordSetterMock.SetResultBatch invocations
func (mmSetResultBatch *RecordSetterMock) SetResultBatchBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetResultBatch.beforeSetResultBatchCounter)
}

// Calls returns a list of arguments used in each call to RecordSetterMock.SetResultBatch.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetResultBatch *mRecordSetterMockSetResultBatch) Calls() []*RecordSetterMockSetResultBatchParams {
	mmSetResultBatch.mutex.RLock()

	argCopy := make([]*RecordSetterMockSetResultBatchParams, len(mmSetResultBatch.callArgs))
	copy(argCopy, mmSetResultBatch.callArgs)

	mmSetResultBatch.mutex.RUnlock()

	return argCopy
}

// MinimockSetResultBatchDone returns true if the count of the SetResultBatch invocations corresponds
// the number of defined expectations
func (m *RecordSetterMock) MinimockSetResultBatchDone() bool {
	for _, e := range m.SetResultBatchMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetResultBatchMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetResultBatchCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetResultBatch != nil && mm_atomic.LoadUint64(&m.afterSetResultBatchCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetResultBatchInspect logs each unmet expectation
func (m *RecordSetterMock) MinimockSetResultBatchInspect() {
	for _, e := range m.SetResultBatchMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RecordSetterMock.SetResultBatch with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetResultBatchMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetResultBatchCounter) < 1 {
		if m.SetResultBatchMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RecordSetterMock.SetResultBatch")
		} else {
			m.t.Errorf("Expected call to RecordSetterMock.SetResultBatch with params: %#v", *m.SetResultBatchMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetResultBatch != nil && mm_atomic.LoadUint64(&m.afterSetResultBatchCounter) < 1 {
		m.t.Error("Expected call to RecordSetterMock.SetResultBatch")
	}
}

type mRecordSetterMockSetSideEffect struct {
	mock               *RecordSetterMock
	defaultExpectation *RecordSetterMockSetSideEffectExpectation
	expectations       []*RecordSetterMockSetSideEffectExpectation

	callArgs []*RecordSetterMockSetSideEffectParams
	mutex    sync.RWMutex
}

// RecordSetterMockSetSideEffectExpectation specifies expectation struct of the RecordSetter.SetSideEffect
type RecordSetterMockSetSideEffectExpectation struct {
	mock    *RecordSetterMock
	params  *RecordSetterMockSetSideEffectParams
	results *RecordSetterMockSetSideEffectResults
	Counter uint64
}

// RecordSetterMockSetSideEffectParams contains parameters of the RecordSetter.SetSideEffect
type RecordSetterMockSetSideEffectParams struct {
	ctx    context.Context
	record record.Material
}

// RecordSetterMockSetSideEffectResults contains results of the RecordSetter.SetSideEffect
type RecordSetterMockSetSideEffectResults struct {
	err error
}

// Expect sets up expected params for RecordSetter.SetSideEffect
func (mmSetSideEffect *mRecordSetterMockSetSideEffect) Expect(ctx context.Context, record record.Material) *mRecordSetterMockSetSideEffect {
	if mmSetSideEffect.mock.funcSetSideEffect != nil {
		mmSetSideEffect.mock.t.Fatalf("RecordSetterMock.SetSideEffect mock is already set by Set")
	}

	if mmSetSideEffect.defaultExpectation == nil {
		mmSetSideEffect.defaultExpectation = &RecordSetterMockSetSideEffectExpectation{}
	}

	mmSetSideEffect.defaultExpectation.params = &RecordSetterMockSetSideEffectParams{ctx, record}
	for _, e := range mmSetSideEffect.expectations {
		if minimock.Equal(e.params, mmSetSideEffect.defaultExpectation.params) {
			mmSetSideEffect.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetSideEffect.defaultExpectation.params)
		}
	}

	return mmSetSideEffect
}

// Inspect accepts an inspector function that has same arguments as the RecordSetter.SetSideEffect
func (mmSetSideEffect *mRecordSetterMockSetSideEffect) Inspect(f func(ctx context.Context, record record.Material)) *mRecordSetterMockSetSideEffect {
	if mmSetSideEffect.mock.inspectFuncSetSideEffect != nil {
		mmSetSideEffect.mock.t.Fatalf("Inspect function is already set for RecordSetterMock.SetSideEffect")
	}

	mmSetSideEffect.mock.inspectFuncSetSideEffect = f

	return mmSetSideEffect
}

// Return sets up results that will be returned by RecordSetter.SetSideEffect
func (mmSetSideEffect *mRecordSetterMockSetSideEffect) Return(err error) *RecordSetterMock {
	if mmSetSideEffect.mock.funcSetSideEffect != nil {
		mmSetSideEffect.mock.t.Fatalf("RecordSetterMock.SetSideEffect mock is already set by Set")
	}

	if mmSetSideEffect.defaultExpectation == nil {
		mmSetSideEffect.defaultExpectation = &RecordSetterMockSetSideEffectExpectation{mock: mmSetSideEffect.mock}
	}
	mmSetSideEffect.defaultExpectation.results = &RecordSetterMockSetSideEffectResults{err}
	return mmSetSideEffect.mock
}

//Set uses given function f to mock the RecordSetter.SetSideEffect method
func (mmSetSideEffect *mRecordSetterMockSetSideEffect) Set(f func(ctx context.Context, record record.Material) (err error)) *RecordSetterMock {
	if mmSetSideEffect.defaultExpectation != nil {
		mmSetSideEffect.mock.t.Fatalf("Default expectation is already set for the RecordSetter.SetSideEffect method")
	}

	if len(mmSetSideEffect.expectations) > 0 {
		mmSetSideEffect.mock.t.Fatalf("Some expectations are already set for the RecordSetter.SetSideEffect method")
	}

	mmSetSideEffect.mock.funcSetSideEffect = f
	return mmSetSideEffect.mock
}

// When sets expectation for the RecordSetter.SetSideEffect which will trigger the result defined by the following
// Then helper
func (mmSetSideEffect *mRecordSetterMockSetSideEffect) When(ctx context.Context, record record.Material) *RecordSetterMockSetSideEffectExpectation {
	if mmSetSideEffect.mock.funcSetSideEffect != nil {
		mmSetSideEffect.mock.t.Fatalf("RecordSetterMock.SetSideEffect mock is already set by Set")
	}

	expectation := &RecordSetterMockSetSideEffectExpectation{
		mock:   mmSetSideEffect.mock,
		params: &RecordSetterMockSetSideEffectParams{ctx, record},
	}
	mmSetSideEffect.expectations = append(mmSetSideEffect.expectations, expectation)
	return expectation
}

// Then sets up RecordSetter.SetSideEffect return parameters for the expectation previously defined by the When method
func (e *RecordSetterMockSetSideEffectExpectation) Then(err error) *RecordSetterMock {
	e.results = &RecordSetterMockSetSideEffectResults{err}
	return e.mock
}

// SetSideEffect implements RecordSetter
func (mmSetSideEffect *RecordSetterMock) SetSideEffect(ctx context.Context, record record.Material) (err error) {
	mm_atomic.AddUint64(&mmSetSideEffect.beforeSetSideEffectCounter, 1)
	defer mm_atomic.AddUint64(&mmSetSideEffect.afterSetSideEffectCounter, 1)

	if mmSetSideEffect.inspectFuncSetSideEffect != nil {
		mmSetSideEffect.inspectFuncSetSideEffect(ctx, record)
	}

	mm_params := &RecordSetterMockSetSideEffectParams{ctx, record}

	// Record call args
	mmSetSideEffect.SetSideEffectMock.mutex.Lock()
	mmSetSideEffect.SetSideEffectMock.callArgs = append(mmSetSideEffect.SetSideEffectMock.callArgs, mm_params)
	mmSetSideEffect.SetSideEffectMock.mutex.Unlock()

	for _, e := range mmSetSideEffect.SetSideEffectMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSetSideEffect.SetSideEffectMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetSideEffect.SetSideEffectMock.defaultExpectation.Counter, 1)
		mm_want := mmSetSideEffect.SetSideEffectMock.defaultExpectation.params
		mm_got := RecordSetterMockSetSideEffectParams{ctx, record}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSetSideEffect.t.Errorf("RecordSetterMock.SetSideEffect got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSetSideEffect.SetSideEffectMock.defaultExpectation.results
		if mm_results == nil {
			mmSetSideEffect.t.Fatal("No results are set for the RecordSetterMock.SetSideEffect")
		}
		return (*mm_results).err
	}
	if mmSetSideEffect.funcSetSideEffect != nil {
		return mmSetSideEffect.funcSetSideEffect(ctx, record)
	}
	mmSetSideEffect.t.Fatalf("Unexpected call to RecordSetterMock.SetSideEffect. %v %v", ctx, record)
	return
}

// SetSideEffectAfterCounter returns a count of finished RecordSetterMock.SetSideEffect invocations
func (mmSetSideEffect *RecordSetterMock) SetSideEffectAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetSideEffect.afterSetSideEffectCounter)
}

// SetSideEffectBeforeCounter returns a count of RecordSetterMock.SetSideEffect invocations
func (mmSetSideEffect *RecordSetterMock) SetSideEffectBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetSideEffect.beforeSetSideEffectCounter)
}

// Calls returns a list of arguments used in each call to RecordSetterMock.SetSideEffect.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetSideEffect *mRecordSetterMockSetSideEffect) Calls() []*RecordSetterMockSetSideEffectParams {
	mmSetSideEffect.mutex.RLock()

	argCopy := make([]*RecordSetterMockSetSideEffectParams, len(mmSetSideEffect.callArgs))
	copy(argCopy, mmSetSideEffect.callArgs)

	mmSetSideEffect.mutex.RUnlock()

	return argCopy
}

// MinimockSetSideEffectDone returns true if the count of the SetSideEffect invocations corresponds
// the number of defined expectations
func (m *RecordSetterMock) MinimockSetSideEffectDone() bool {
	for _, e := range m.SetSideEffectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetSideEffectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetSideEffectCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetSideEffect != nil && mm_atomic.LoadUint64(&m.afterSetSideEffectCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetSideEffectInspect logs each unmet expectation
func (m *RecordSetterMock) MinimockSetSideEffectInspect() {
	for _, e := range m.SetSideEffectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RecordSetterMock.SetSideEffect with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetSideEffectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetSideEffectCounter) < 1 {
		if m.SetSideEffectMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RecordSetterMock.SetSideEffect")
		} else {
			m.t.Errorf("Expected call to RecordSetterMock.SetSideEffect with params: %#v", *m.SetSideEffectMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetSideEffect != nil && mm_atomic.LoadUint64(&m.afterSetSideEffectCounter) < 1 {
		m.t.Error("Expected call to RecordSetterMock.SetSideEffect")
	}
}

type mRecordSetterMockSetSideEffectBatch struct {
	mock               *RecordSetterMock
	defaultExpectation *RecordSetterMockSetSideEffectBatchExpectation
	expectations       []*RecordSetterMockSetSideEffectBatchExpectation

	callArgs []*RecordSetterMockSetSideEffectBatchParams
	mutex    sync.RWMutex
}

// RecordSetterMockSetSideEffectBatchExpectation specifies expectation struct of the RecordSetter.SetSideEffectBatch
type RecordSetterMockSetSideEffectBatchExpectation struct {
	mock    *RecordSetterMock
	params  *RecordSetterMockSetSideEffectBatchParams
	results *RecordSetterMockSetSideEffectBatchResults
	Counter uint64
}

// RecordSetterMockSetSideEffectBatchParams contains parameters of the RecordSetter.SetSideEffectBatch
type RecordSetterMockSetSideEffectBatchParams struct {
	ctx            context.Context
	requestRecords []record.Material
}

// RecordSetterMockSetSideEffectBatchResults contains results of the RecordSetter.SetSideEffectBatch
type RecordSetterMockSetSideEffectBatchResults struct {
	err error
}

// Expect sets up expected params for RecordSetter.SetSideEffectBatch
func (mmSetSideEffectBatch *mRecordSetterMockSetSideEffectBatch) Expect(ctx context.Context, requestRecords []record.Material) *mRecordSetterMockSetSideEffectBatch {
	if mmSetSideEffectBatch.mock.funcSetSideEffectBatch != nil {
		mmSetSideEffectBatch.mock.t.Fatalf("RecordSetterMock.SetSideEffectBatch mock is already set by Set")
	}

	if mmSetSideEffectBatch.defaultExpectation == nil {
		mmSetSideEffectBatch.defaultExpectation = &RecordSetterMockSetSideEffectBatchExpectation{}
	}

	mmSetSideEffectBatch.defaultExpectation.params = &RecordSetterMockSetSideEffectBatchParams{ctx, requestRecords}
	for _, e := range mmSetSideEffectBatch.expectations {
		if minimock.Equal(e.params, mmSetSideEffectBatch.defaultExpectation.params) {
			mmSetSideEffectBatch.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetSideEffectBatch.defaultExpectation.params)
		}
	}

	return mmSetSideEffectBatch
}

// Inspect accepts an inspector function that has same arguments as the RecordSetter.SetSideEffectBatch
func (mmSetSideEffectBatch *mRecordSetterMockSetSideEffectBatch) Inspect(f func(ctx context.Context, requestRecords []record.Material)) *mRecordSetterMockSetSideEffectBatch {
	if mmSetSideEffectBatch.mock.inspectFuncSetSideEffectBatch != nil {
		mmSetSideEffectBatch.mock.t.Fatalf("Inspect function is already set for RecordSetterMock.SetSideEffectBatch")
	}

	mmSetSideEffectBatch.mock.inspectFuncSetSideEffectBatch = f

	return mmSetSideEffectBatch
}

// Return sets up results that will be returned by RecordSetter.SetSideEffectBatch
func (mmSetSideEffectBatch *mRecordSetterMockSetSideEffectBatch) Return(err error) *RecordSetterMock {
	if mmSetSideEffectBatch.mock.funcSetSideEffectBatch != nil {
		mmSetSideEffectBatch.mock.t.Fatalf("RecordSetterMock.SetSideEffectBatch mock is already set by Set")
	}

	if mmSetSideEffectBatch.defaultExpectation == nil {
		mmSetSideEffectBatch.defaultExpectation = &RecordSetterMockSetSideEffectBatchExpectation{mock: mmSetSideEffectBatch.mock}
	}
	mmSetSideEffectBatch.defaultExpectation.results = &RecordSetterMockSetSideEffectBatchResults{err}
	return mmSetSideEffectBatch.mock
}

//Set uses given function f to mock the RecordSetter.SetSideEffectBatch method
func (mmSetSideEffectBatch *mRecordSetterMockSetSideEffectBatch) Set(f func(ctx context.Context, requestRecords []record.Material) (err error)) *RecordSetterMock {
	if mmSetSideEffectBatch.defaultExpectation != nil {
		mmSetSideEffectBatch.mock.t.Fatalf("Default expectation is already set for the RecordSetter.SetSideEffectBatch method")
	}

	if len(mmSetSideEffectBatch.expectations) > 0 {
		mmSetSideEffectBatch.mock.t.Fatalf("Some expectations are already set for the RecordSetter.SetSideEffectBatch method")
	}

	mmSetSideEffectBatch.mock.funcSetSideEffectBatch = f
	return mmSetSideEffectBatch.mock
}

// When sets expectation for the RecordSetter.SetSideEffectBatch which will trigger the result defined by the following
// Then helper
func (mmSetSideEffectBatch *mRecordSetterMockSetSideEffectBatch) When(ctx context.Context, requestRecords []record.Material) *RecordSetterMockSetSideEffectBatchExpectation {
	if mmSetSideEffectBatch.mock.funcSetSideEffectBatch != nil {
		mmSetSideEffectBatch.mock.t.Fatalf("RecordSetterMock.SetSideEffectBatch mock is already set by Set")
	}

	expectation := &RecordSetterMockSetSideEffectBatchExpectation{
		mock:   mmSetSideEffectBatch.mock,
		params: &RecordSetterMockSetSideEffectBatchParams{ctx, requestRecords},
	}
	mmSetSideEffectBatch.expectations = append(mmSetSideEffectBatch.expectations, expectation)
	return expectation
}

// Then sets up RecordSetter.SetSideEffectBatch return parameters for the expectation previously defined by the When method
func (e *RecordSetterMockSetSideEffectBatchExpectation) Then(err error) *RecordSetterMock {
	e.results = &RecordSetterMockSetSideEffectBatchResults{err}
	return e.mock
}

// SetSideEffectBatch implements RecordSetter
func (mmSetSideEffectBatch *RecordSetterMock) SetSideEffectBatch(ctx context.Context, requestRecords []record.Material) (err error) {
	mm_atomic.AddUint64(&mmSetSideEffectBatch.beforeSetSideEffectBatchCounter, 1)
	defer mm_atomic.AddUint64(&mmSetSideEffectBatch.afterSetSideEffectBatchCounter, 1)

	if mmSetSideEffectBatch.inspectFuncSetSideEffectBatch != nil {
		mmSetSideEffectBatch.inspectFuncSetSideEffectBatch(ctx, requestRecords)
	}

	mm_params := &RecordSetterMockSetSideEffectBatchParams{ctx, requestRecords}

	// Record call args
	mmSetSideEffectBatch.SetSideEffectBatchMock.mutex.Lock()
	mmSetSideEffectBatch.SetSideEffectBatchMock.callArgs = append(mmSetSideEffectBatch.SetSideEffectBatchMock.callArgs, mm_params)
	mmSetSideEffectBatch.SetSideEffectBatchMock.mutex.Unlock()

	for _, e := range mmSetSideEffectBatch.SetSideEffectBatchMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSetSideEffectBatch.SetSideEffectBatchMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetSideEffectBatch.SetSideEffectBatchMock.defaultExpectation.Counter, 1)
		mm_want := mmSetSideEffectBatch.SetSideEffectBatchMock.defaultExpectation.params
		mm_got := RecordSetterMockSetSideEffectBatchParams{ctx, requestRecords}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSetSideEffectBatch.t.Errorf("RecordSetterMock.SetSideEffectBatch got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSetSideEffectBatch.SetSideEffectBatchMock.defaultExpectation.results
		if mm_results == nil {
			mmSetSideEffectBatch.t.Fatal("No results are set for the RecordSetterMock.SetSideEffectBatch")
		}
		return (*mm_results).err
	}
	if mmSetSideEffectBatch.funcSetSideEffectBatch != nil {
		return mmSetSideEffectBatch.funcSetSideEffectBatch(ctx, requestRecords)
	}
	mmSetSideEffectBatch.t.Fatalf("Unexpected call to RecordSetterMock.SetSideEffectBatch. %v %v", ctx, requestRecords)
	return
}

// SetSideEffectBatchAfterCounter returns a count of finished RecordSetterMock.SetSideEffectBatch invocations
func (mmSetSideEffectBatch *RecordSetterMock) SetSideEffectBatchAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetSideEffectBatch.afterSetSideEffectBatchCounter)
}

// SetSideEffectBatchBeforeCounter returns a count of RecordSetterMock.SetSideEffectBatch invocations
func (mmSetSideEffectBatch *RecordSetterMock) SetSideEffectBatchBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetSideEffectBatch.beforeSetSideEffectBatchCounter)
}

// Calls returns a list of arguments used in each call to RecordSetterMock.SetSideEffectBatch.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetSideEffectBatch *mRecordSetterMockSetSideEffectBatch) Calls() []*RecordSetterMockSetSideEffectBatchParams {
	mmSetSideEffectBatch.mutex.RLock()

	argCopy := make([]*RecordSetterMockSetSideEffectBatchParams, len(mmSetSideEffectBatch.callArgs))
	copy(argCopy, mmSetSideEffectBatch.callArgs)

	mmSetSideEffectBatch.mutex.RUnlock()

	return argCopy
}

// MinimockSetSideEffectBatchDone returns true if the count of the SetSideEffectBatch invocations corresponds
// the number of defined expectations
func (m *RecordSetterMock) MinimockSetSideEffectBatchDone() bool {
	for _, e := range m.SetSideEffectBatchMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetSideEffectBatchMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetSideEffectBatchCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetSideEffectBatch != nil && mm_atomic.LoadUint64(&m.afterSetSideEffectBatchCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetSideEffectBatchInspect logs each unmet expectation
func (m *RecordSetterMock) MinimockSetSideEffectBatchInspect() {
	for _, e := range m.SetSideEffectBatchMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RecordSetterMock.SetSideEffectBatch with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetSideEffectBatchMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetSideEffectBatchCounter) < 1 {
		if m.SetSideEffectBatchMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RecordSetterMock.SetSideEffectBatch")
		} else {
			m.t.Errorf("Expected call to RecordSetterMock.SetSideEffectBatch with params: %#v", *m.SetSideEffectBatchMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetSideEffectBatch != nil && mm_atomic.LoadUint64(&m.afterSetSideEffectBatchCounter) < 1 {
		m.t.Error("Expected call to RecordSetterMock.SetSideEffectBatch")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RecordSetterMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockSetRequestInspect()

		m.MinimockSetRequestBatchInspect()

		m.MinimockSetResultInspect()

		m.MinimockSetResultBatchInspect()

		m.MinimockSetSideEffectInspect()

		m.MinimockSetSideEffectBatchInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RecordSetterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RecordSetterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSetRequestDone() &&
		m.MinimockSetRequestBatchDone() &&
		m.MinimockSetResultDone() &&
		m.MinimockSetResultBatchDone() &&
		m.MinimockSetSideEffectDone() &&
		m.MinimockSetSideEffectBatchDone()
}
