package observer

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
)

// RecordFetcherMock implements RecordFetcher
type RecordFetcherMock struct {
	t minimock.Tester

	funcFetch          func(ctx context.Context, p1 insolar.PulseNumber) (m1 map[uint32]*Record, p2 insolar.PulseNumber, err error)
	inspectFuncFetch   func(ctx context.Context, p1 insolar.PulseNumber)
	afterFetchCounter  uint64
	beforeFetchCounter uint64
	FetchMock          mRecordFetcherMockFetch
}

// NewRecordFetcherMock returns a mock for RecordFetcher
func NewRecordFetcherMock(t minimock.Tester) *RecordFetcherMock {
	m := &RecordFetcherMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.FetchMock = mRecordFetcherMockFetch{mock: m}
	m.FetchMock.callArgs = []*RecordFetcherMockFetchParams{}

	return m
}

type mRecordFetcherMockFetch struct {
	mock               *RecordFetcherMock
	defaultExpectation *RecordFetcherMockFetchExpectation
	expectations       []*RecordFetcherMockFetchExpectation

	callArgs []*RecordFetcherMockFetchParams
	mutex    sync.RWMutex
}

// RecordFetcherMockFetchExpectation specifies expectation struct of the RecordFetcher.Fetch
type RecordFetcherMockFetchExpectation struct {
	mock    *RecordFetcherMock
	params  *RecordFetcherMockFetchParams
	results *RecordFetcherMockFetchResults
	Counter uint64
}

// RecordFetcherMockFetchParams contains parameters of the RecordFetcher.Fetch
type RecordFetcherMockFetchParams struct {
	ctx context.Context
	p1  insolar.PulseNumber
}

// RecordFetcherMockFetchResults contains results of the RecordFetcher.Fetch
type RecordFetcherMockFetchResults struct {
	m1  map[uint32]*Record
	p2  insolar.PulseNumber
	err error
}

// Expect sets up expected params for RecordFetcher.Fetch
func (mmFetch *mRecordFetcherMockFetch) Expect(ctx context.Context, p1 insolar.PulseNumber) *mRecordFetcherMockFetch {
	if mmFetch.mock.funcFetch != nil {
		mmFetch.mock.t.Fatalf("RecordFetcherMock.Fetch mock is already set by Set")
	}

	if mmFetch.defaultExpectation == nil {
		mmFetch.defaultExpectation = &RecordFetcherMockFetchExpectation{}
	}

	mmFetch.defaultExpectation.params = &RecordFetcherMockFetchParams{ctx, p1}
	for _, e := range mmFetch.expectations {
		if minimock.Equal(e.params, mmFetch.defaultExpectation.params) {
			mmFetch.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmFetch.defaultExpectation.params)
		}
	}

	return mmFetch
}

// Inspect accepts an inspector function that has same arguments as the RecordFetcher.Fetch
func (mmFetch *mRecordFetcherMockFetch) Inspect(f func(ctx context.Context, p1 insolar.PulseNumber)) *mRecordFetcherMockFetch {
	if mmFetch.mock.inspectFuncFetch != nil {
		mmFetch.mock.t.Fatalf("Inspect function is already set for RecordFetcherMock.Fetch")
	}

	mmFetch.mock.inspectFuncFetch = f

	return mmFetch
}

// Return sets up results that will be returned by RecordFetcher.Fetch
func (mmFetch *mRecordFetcherMockFetch) Return(m1 map[uint32]*Record, p2 insolar.PulseNumber, err error) *RecordFetcherMock {
	if mmFetch.mock.funcFetch != nil {
		mmFetch.mock.t.Fatalf("RecordFetcherMock.Fetch mock is already set by Set")
	}

	if mmFetch.defaultExpectation == nil {
		mmFetch.defaultExpectation = &RecordFetcherMockFetchExpectation{mock: mmFetch.mock}
	}
	mmFetch.defaultExpectation.results = &RecordFetcherMockFetchResults{m1, p2, err}
	return mmFetch.mock
}

//Set uses given function f to mock the RecordFetcher.Fetch method
func (mmFetch *mRecordFetcherMockFetch) Set(f func(ctx context.Context, p1 insolar.PulseNumber) (m1 map[uint32]*Record, p2 insolar.PulseNumber, err error)) *RecordFetcherMock {
	if mmFetch.defaultExpectation != nil {
		mmFetch.mock.t.Fatalf("Default expectation is already set for the RecordFetcher.Fetch method")
	}

	if len(mmFetch.expectations) > 0 {
		mmFetch.mock.t.Fatalf("Some expectations are already set for the RecordFetcher.Fetch method")
	}

	mmFetch.mock.funcFetch = f
	return mmFetch.mock
}

// When sets expectation for the RecordFetcher.Fetch which will trigger the result defined by the following
// Then helper
func (mmFetch *mRecordFetcherMockFetch) When(ctx context.Context, p1 insolar.PulseNumber) *RecordFetcherMockFetchExpectation {
	if mmFetch.mock.funcFetch != nil {
		mmFetch.mock.t.Fatalf("RecordFetcherMock.Fetch mock is already set by Set")
	}

	expectation := &RecordFetcherMockFetchExpectation{
		mock:   mmFetch.mock,
		params: &RecordFetcherMockFetchParams{ctx, p1},
	}
	mmFetch.expectations = append(mmFetch.expectations, expectation)
	return expectation
}

// Then sets up RecordFetcher.Fetch return parameters for the expectation previously defined by the When method
func (e *RecordFetcherMockFetchExpectation) Then(m1 map[uint32]*Record, p2 insolar.PulseNumber, err error) *RecordFetcherMock {
	e.results = &RecordFetcherMockFetchResults{m1, p2, err}
	return e.mock
}

// Fetch implements RecordFetcher
func (mmFetch *RecordFetcherMock) Fetch(ctx context.Context, p1 insolar.PulseNumber) (m1 map[uint32]*Record, p2 insolar.PulseNumber, err error) {
	mm_atomic.AddUint64(&mmFetch.beforeFetchCounter, 1)
	defer mm_atomic.AddUint64(&mmFetch.afterFetchCounter, 1)

	if mmFetch.inspectFuncFetch != nil {
		mmFetch.inspectFuncFetch(ctx, p1)
	}

	params := &RecordFetcherMockFetchParams{ctx, p1}

	// Record call args
	mmFetch.FetchMock.mutex.Lock()
	mmFetch.FetchMock.callArgs = append(mmFetch.FetchMock.callArgs, params)
	mmFetch.FetchMock.mutex.Unlock()

	for _, e := range mmFetch.FetchMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.m1, e.results.p2, e.results.err
		}
	}

	if mmFetch.FetchMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmFetch.FetchMock.defaultExpectation.Counter, 1)
		want := mmFetch.FetchMock.defaultExpectation.params
		got := RecordFetcherMockFetchParams{ctx, p1}
		if want != nil && !minimock.Equal(*want, got) {
			mmFetch.t.Errorf("RecordFetcherMock.Fetch got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmFetch.FetchMock.defaultExpectation.results
		if results == nil {
			mmFetch.t.Fatal("No results are set for the RecordFetcherMock.Fetch")
		}
		return (*results).m1, (*results).p2, (*results).err
	}
	if mmFetch.funcFetch != nil {
		return mmFetch.funcFetch(ctx, p1)
	}
	mmFetch.t.Fatalf("Unexpected call to RecordFetcherMock.Fetch. %v %v", ctx, p1)
	return
}

// FetchAfterCounter returns a count of finished RecordFetcherMock.Fetch invocations
func (mmFetch *RecordFetcherMock) FetchAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFetch.afterFetchCounter)
}

// FetchBeforeCounter returns a count of RecordFetcherMock.Fetch invocations
func (mmFetch *RecordFetcherMock) FetchBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFetch.beforeFetchCounter)
}

// Calls returns a list of arguments used in each call to RecordFetcherMock.Fetch.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmFetch *mRecordFetcherMockFetch) Calls() []*RecordFetcherMockFetchParams {
	mmFetch.mutex.RLock()

	argCopy := make([]*RecordFetcherMockFetchParams, len(mmFetch.callArgs))
	copy(argCopy, mmFetch.callArgs)

	mmFetch.mutex.RUnlock()

	return argCopy
}

// MinimockFetchDone returns true if the count of the Fetch invocations corresponds
// the number of defined expectations
func (m *RecordFetcherMock) MinimockFetchDone() bool {
	for _, e := range m.FetchMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FetchMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFetchCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFetch != nil && mm_atomic.LoadUint64(&m.afterFetchCounter) < 1 {
		return false
	}
	return true
}

// MinimockFetchInspect logs each unmet expectation
func (m *RecordFetcherMock) MinimockFetchInspect() {
	for _, e := range m.FetchMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RecordFetcherMock.Fetch with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FetchMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFetchCounter) < 1 {
		if m.FetchMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RecordFetcherMock.Fetch")
		} else {
			m.t.Errorf("Expected call to RecordFetcherMock.Fetch with params: %#v", *m.FetchMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFetch != nil && mm_atomic.LoadUint64(&m.afterFetchCounter) < 1 {
		m.t.Error("Expected call to RecordFetcherMock.Fetch")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RecordFetcherMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockFetchInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RecordFetcherMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RecordFetcherMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockFetchDone()
}
