// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"context"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi"
	"net/http"
)

// DefinitionsResponsesBalanceYaml defines model for definitions-responses-balance-yaml.
type DefinitionsResponsesBalanceYaml struct {
	AccountReference struct {
		// Embedded fields due to inline allOf schema
	} `json:"accountReference"`
	Balance  string `json:"balance"`
	Deposits *[]struct {
		AmountOnHold    string  `json:"amountOnHold"`
		AvailableAmount string  `json:"availableAmount"`
		EthTxHash       string  `json:"ethTxHash"`
		HoldReleaseDate int64   `json:"holdReleaseDate"`
		Index           float32 `json:"index"`
		NextRelease     *struct {
			Amount    string `json:"amount"`
			Timestamp int64  `json:"timestamp"`
		} `json:"nextRelease,omitempty"`
		Reference *struct {
			// Embedded fields due to inline allOf schema
		} `json:"reference,omitempty"`
		ReleaseEndDate int64  `json:"releaseEndDate"`
		ReleasedAmount string `json:"releasedAmount"`
		Status         string `json:"status"`
		Timestamp      int64  `json:"timestamp"`
	} `json:"deposits,omitempty"`
	MigrationAddress *struct {
		// Embedded fields due to inline allOf schema
	} `json:"migrationAddress,omitempty"`
	WalletReference struct {
		// Embedded fields due to inline allOf schema
	} `json:"walletReference"`
}

// DefinitionsResponsesCoinsYaml defines model for definitions-responses-coins-yaml.
type DefinitionsResponsesCoinsYaml struct {
	CirculatingSupply float32 `json:"circulatingSupply"`
	MaxSupply         float32 `json:"maxSupply"`
	TotalSupply       float32 `json:"totalSupply"`
}

// DefinitionsResponsesCoinsCirculatingYaml defines model for definitions-responses-coinsCirculating-yaml.
type DefinitionsResponsesCoinsCirculatingYaml struct {
	CirculatingSupply float32 `json:"circulatingSupply"`
}

// DefinitionsResponsesCoinsMaxYaml defines model for definitions-responses-coinsMax-yaml.
type DefinitionsResponsesCoinsMaxYaml struct {
	MaxSupply float32 `json:"maxSupply"`
}

// DefinitionsResponsesCoinsTotalYaml defines model for definitions-responses-coinsTotal-yaml.
type DefinitionsResponsesCoinsTotalYaml struct {
	TotalSupply float32 `json:"totalSupply"`
}

// DefinitionsResponsesFeeYaml defines model for definitions-responses-fee-yaml.
type DefinitionsResponsesFeeYaml struct {
	Fee string `json:"fee"`
}

// DefinitionsResponsesInvalidAmountYaml defines model for definitions-responses-invalidAmount-yaml.
type DefinitionsResponsesInvalidAmountYaml struct {
	Error []string `json:"error"`
}

// DefinitionsResponsesInvalidReferenceYaml defines model for definitions-responses-invalidReference-yaml.
type DefinitionsResponsesInvalidReferenceYaml struct {
	Error []string `json:"error"`
}

// DefinitionsResponsesInvalidTransactionIdYaml defines model for definitions-responses-invalidTransactionId-yaml.
type DefinitionsResponsesInvalidTransactionIdYaml struct {
	Error []string `json:"error"`
}

// DefinitionsResponsesInvalidTransactionListParametersYaml defines model for definitions-responses-invalidTransactionListParameters-yaml.
type DefinitionsResponsesInvalidTransactionListParametersYaml struct {
	Error []string `json:"error"`
}

// DefinitionsResponsesMemberBalanceYaml defines model for definitions-responses-memberBalance-yaml.
type DefinitionsResponsesMemberBalanceYaml struct {
	Balance string `json:"balance"`
}

// DefinitionsResponsesNotificationInfoYaml defines model for definitions-responses-notificationInfo-yaml.
type DefinitionsResponsesNotificationInfoYaml struct {
	Notification string `json:"notification"`
}

// DefinitionsResponsesTransactionYaml defines model for definitions-responses-transaction-yaml.
type DefinitionsResponsesTransactionYaml struct {
	Amount      string      `json:"amount"`
	Fee         string      `json:"fee"`
	Index       float32     `json:"index"`
	PulseNumber float32     `json:"pulseNumber"`
	References  interface{} `json:"references"`
	Status      string      `json:"status"`
	Timestamp   float32     `json:"timestamp"`
}

// DefinitionsResponsesTransactionListYaml defines model for definitions-responses-transactionList-yaml.
type DefinitionsResponsesTransactionListYaml []struct {
	// Embedded fields due to inline allOf schema
	Amount      string      `json:"amount"`
	Fee         string      `json:"fee"`
	Index       float32     `json:"index"`
	PulseNumber float32     `json:"pulseNumber"`
	References  interface{} `json:"references"`
	Status      string      `json:"status"`
	Timestamp   float32     `json:"timestamp"`
}

// DefinitionsResponsesTransactionsYaml defines model for definitions-responses-transactions-yaml.
type DefinitionsResponsesTransactionsYaml []struct {
	// Embedded fields due to inline allOf schema
	Amount      string      `json:"amount"`
	Fee         string      `json:"fee"`
	Index       float32     `json:"index"`
	PulseNumber float32     `json:"pulseNumber"`
	References  interface{} `json:"references"`
	Status      string      `json:"status"`
	Timestamp   float32     `json:"timestamp"`
}

// Migration defines model for migration.
type Migration struct {
	FromMemberReference struct {
		// Embedded fields due to inline allOf schema
	} `json:"fromMemberReference"`
	ToDepositReference struct {
		// Embedded fields due to inline allOf schema
	} `json:"toDepositReference"`
	ToMemberReference struct {
		// Embedded fields due to inline allOf schema
	} `json:"toMemberReference"`
	Type string `json:"type"`
}

// Release defines model for release.
type Release struct {
	FromDepositReference struct {
		// Embedded fields due to inline allOf schema
	} `json:"fromDepositReference"`
	ToMemberReference struct {
		// Embedded fields due to inline allOf schema
	} `json:"toMemberReference"`
	Type string `json:"type"`
}

// Transfer defines model for transfer.
type Transfer struct {
	FromMemberReference struct {
		// Embedded fields due to inline allOf schema
	} `json:"fromMemberReference"`
	ToMemberReference struct {
		// Embedded fields due to inline allOf schema
	} `json:"toMemberReference"`
	Type string `json:"type"`
}

// TransactionListParams defines parameters for TransactionList.
type TransactionListParams struct {

	// Index of the transaction from which to start the list. To get the list of most recent transactions, do not specify.
	LastIndex *float32 `json:"lastIndex,omitempty"`

	// Number of entries per list.
	Limit int `json:"limit"`

	// Transaction type:
	//
	// * `transfer` - transactions to/from to member,
	// * `migration` - transactions only to member's deposits,
	// * `release` - transactions only from member's deposits to member's account.
	Type *string `json:"type,omitempty"`
}

// TransactionsSearchParams defines parameters for TransactionsSearch.
type TransactionsSearchParams struct {

	// Value of `txID`, `fromMemberReference`, `toMemberReference` or `pulseNumber` by which to search (filter) transactions.
	//
	// Note: since path parameters must be valid parts of URL, the `:` after `insolar` in references and IDs is to be replaced with `%3A` in accordance with the HTML URL encoding.
	Value *string `json:"value,omitempty"`

	// Number of entries per list.
	Limit int `json:"limit"`

	// Index of the transaction from which to start the list. To get the list of most recent transactions, do not specify.
	LastIndex *int `json:"lastIndex,omitempty"`

	// Transaction type:
	//
	// * `transfer` - transactions to/from to member,
	// * `migration` - transactions only to member's deposits,
	// * `release` - transactions only from member's deposits to member's account.
	Type *string `json:"type,omitempty"`
}

type ServerInterface interface {
	// balance (GET /api/balance/{reference})
	Balance(w http.ResponseWriter, r *http.Request)
	// fee (GET /api/fee/{amount})
	Fee(w http.ResponseWriter, r *http.Request)
	// member (GET /api/member/{reference})
	Member(w http.ResponseWriter, r *http.Request)
	// notification (GET /api/notification)
	Notification(w http.ResponseWriter, r *http.Request)
	// transaction (GET /api/transaction/{txID})
	Transaction(w http.ResponseWriter, r *http.Request)
	// transactionList (GET /api/transactionList/{reference})
	TransactionList(w http.ResponseWriter, r *http.Request)
	// transactions (GET /api/transactions)
	TransactionsSearch(w http.ResponseWriter, r *http.Request)
	// coins (GET /coins)
	Coins(w http.ResponseWriter, r *http.Request)
	// coins/circulating (GET /coins/circulating)
	CoinsCirculating(w http.ResponseWriter, r *http.Request)
	// coins/max (GET /coins/max)
	CoinsMax(w http.ResponseWriter, r *http.Request)
	// coins/total (GET /coins/total)
	CoinsTotal(w http.ResponseWriter, r *http.Request)
}

// Balance operation middleware
func BalanceCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		// ------------- Path parameter "reference" -------------
		var pathErr error
		var reference string

		pathErr = runtime.BindStyledParameter("simple", false, "reference", chi.URLParam(r, "reference"), &reference)
		if pathErr != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter reference: %s", pathErr), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(r.Context(), "reference", reference)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Fee operation middleware
func FeeCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		// ------------- Path parameter "amount" -------------
		var pathErr error
		var amount string

		pathErr = runtime.BindStyledParameter("simple", false, "amount", chi.URLParam(r, "amount"), &amount)
		if pathErr != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter amount: %s", pathErr), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(r.Context(), "amount", amount)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Member operation middleware
func MemberCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		// ------------- Path parameter "reference" -------------
		var pathErr error
		var reference string

		pathErr = runtime.BindStyledParameter("simple", false, "reference", chi.URLParam(r, "reference"), &reference)
		if pathErr != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter reference: %s", pathErr), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(r.Context(), "reference", reference)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Notification operation middleware
func NotificationCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Transaction operation middleware
func TransactionCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		// ------------- Path parameter "txID" -------------
		var pathErr error
		var txID string

		pathErr = runtime.BindStyledParameter("simple", false, "txID", chi.URLParam(r, "txID"), &txID)
		if pathErr != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter txID: %s", pathErr), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(r.Context(), "txID", txID)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// ParamsForTransactionList operation parameters from context
func ParamsForTransactionList(ctx context.Context) *TransactionListParams {
	return ctx.Value("TransactionListParams").(*TransactionListParams)
}

// TransactionList operation middleware
func TransactionListCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		// ------------- Path parameter "reference" -------------
		var pathErr error
		var reference string

		pathErr = runtime.BindStyledParameter("simple", false, "reference", chi.URLParam(r, "reference"), &reference)
		if pathErr != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter reference: %s", pathErr), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(r.Context(), "reference", reference)

		var err error
		// Parameter object where we will unmarshal all parameters from the context
		var params TransactionListParams

		// ------------- Optional query parameter "lastIndex" -------------
		if paramValue := r.URL.Query().Get("lastIndex"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "lastIndex", r.URL.Query(), &params.LastIndex)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter lastIndex: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Required query parameter "limit" -------------
		if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

		} else {
			http.Error(w, "Query argument limit is required, but not found", http.StatusBadRequest)
			return
		}

		err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "type" -------------
		if paramValue := r.URL.Query().Get("type"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter type: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(r.Context(), "TransactionListParams", &params)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// ParamsForTransactionsSearch operation parameters from context
func ParamsForTransactionsSearch(ctx context.Context) *TransactionsSearchParams {
	return ctx.Value("TransactionsSearchParams").(*TransactionsSearchParams)
}

// TransactionsSearch operation middleware
func TransactionsSearchCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error
		// Parameter object where we will unmarshal all parameters from the context
		var params TransactionsSearchParams

		// ------------- Optional query parameter "value" -------------
		if paramValue := r.URL.Query().Get("value"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "value", r.URL.Query(), &params.Value)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter value: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Required query parameter "limit" -------------
		if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

		} else {
			http.Error(w, "Query argument limit is required, but not found", http.StatusBadRequest)
			return
		}

		err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "lastIndex" -------------
		if paramValue := r.URL.Query().Get("lastIndex"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "lastIndex", r.URL.Query(), &params.LastIndex)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter lastIndex: %s", err), http.StatusBadRequest)
			return
		}

		// ------------- Optional query parameter "type" -------------
		if paramValue := r.URL.Query().Get("type"); paramValue != "" {

		}

		err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter type: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(r.Context(), "TransactionsSearchParams", &params)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Coins operation middleware
func CoinsCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// CoinsCirculating operation middleware
func CoinsCirculatingCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// CoinsMax operation middleware
func CoinsMaxCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// CoinsTotal operation middleware
func CoinsTotalCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	r := chi.NewRouter()

	r.Group(func(r chi.Router) {
		r.Use(BalanceCtx)
		r.Get("/api/balance/{reference}", si.Balance)
	})
	r.Group(func(r chi.Router) {
		r.Use(FeeCtx)
		r.Get("/api/fee/{amount}", si.Fee)
	})
	r.Group(func(r chi.Router) {
		r.Use(MemberCtx)
		r.Get("/api/member/{reference}", si.Member)
	})
	r.Group(func(r chi.Router) {
		r.Use(NotificationCtx)
		r.Get("/api/notification", si.Notification)
	})
	r.Group(func(r chi.Router) {
		r.Use(TransactionCtx)
		r.Get("/api/transaction/{txID}", si.Transaction)
	})
	r.Group(func(r chi.Router) {
		r.Use(TransactionListCtx)
		r.Get("/api/transactionList/{reference}", si.TransactionList)
	})
	r.Group(func(r chi.Router) {
		r.Use(TransactionsSearchCtx)
		r.Get("/api/transactions", si.TransactionsSearch)
	})
	r.Group(func(r chi.Router) {
		r.Use(CoinsCtx)
		r.Get("/coins", si.Coins)
	})
	r.Group(func(r chi.Router) {
		r.Use(CoinsCirculatingCtx)
		r.Get("/coins/circulating", si.CoinsCirculating)
	})
	r.Group(func(r chi.Router) {
		r.Use(CoinsMaxCtx)
		r.Get("/coins/max", si.CoinsMax)
	})
	r.Group(func(r chi.Router) {
		r.Use(CoinsTotalCtx)
		r.Get("/coins/total", si.CoinsTotal)
	})

	return r
}

