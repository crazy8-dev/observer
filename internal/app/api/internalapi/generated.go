// Package internalapi provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package internalapi

import (
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
	"net/http"
)

// DefinitionsResponsesAddressCountYaml defines model for definitions-responses-addressCount-yaml.
type DefinitionsResponsesAddressCountYaml struct {
	Count int `json:"count"`
}

// DefinitionsResponsesAddressListYaml defines model for definitions-responses-addressList-yaml.
type DefinitionsResponsesAddressListYaml []string

// DefinitionsResponsesDetailsYaml defines model for definitions-responses-details-yaml.
type DefinitionsResponsesDetailsYaml struct {
	CostCenter struct {
		CalcFeeRequest string `json:"calcFeeRequest"`
		Reference      string `json:"reference"`
	} `json:"costCenter"`
	FeeMember struct {
		AcceptRequest string `json:"acceptRequest"`
		Reference     string `json:"reference"`
	} `json:"feeMember"`
	From struct {
		AccountReference string `json:"accountReference"`
		MemberReference  string `json:"memberReference"`
		TransferRequests struct {
			Account string `json:"account"`
			Member  string `json:"member"`
			Wallet  string `json:"wallet"`
		} `json:"transferRequests"`
		WalletReference string `json:"walletReference"`
	} `json:"from"`
	To struct {
		AcceptRequests struct {
			Account string `json:"account"`
			Member  string `json:"member"`
			Wallet  string `json:"wallet"`
		} `json:"acceptRequests"`
		AccountReference string `json:"accountReference"`
		MemberReference  string `json:"memberReference"`
		WalletReference  string `json:"walletReference"`
	} `json:"to"`
}

// DefinitionsResponsesStatisticsYaml defines model for definitions-responses-statistics-yaml.
type DefinitionsResponsesStatisticsYaml struct {
	Accounts              float32 `json:"accounts"`
	CurrentTPS            float32 `json:"currentTPS"`
	LastMonthTransactions float32 `json:"lastMonthTransactions"`
	MaxTPS                float32 `json:"maxTPS"`
	Nodes                 float32 `json:"nodes"`
	TotalTransactions     float32 `json:"totalTransactions"`
}

// DefinitionsResponsesTokenInfoYaml defines model for definitions-responses-tokenInfo-yaml.
type DefinitionsResponsesTokenInfoYaml struct {
	CurrentPrice string `json:"currentPrice"`
	DailyChange  string `json:"dailyChange"`
	MarketCap    string `json:"marketCap"`
	Rank         string `json:"rank"`
	Volume       string `json:"volume"`
}

// DefinitionsResponsesWeekPricesYaml defines model for definitions-responses-weekPrices-yaml.
type DefinitionsResponsesWeekPricesYaml []struct {
	Price     string `json:"price"`
	Timestamp int64  `json:"timestamp"`
}

// GetMigrationAddressesParams defines parameters for GetMigrationAddresses.
type GetMigrationAddressesParams struct {

	// The `migrationAddress` to start from. To start from the first added one, do not specify.
	MigrationAddress *string `json:"migrationAddress,omitempty"`

	// Number of entries per list.
	Limit int `json:"limit"`
}

// TokenGetInfoParams defines parameters for TokenGetInfo.
type TokenGetInfoParams struct {

	// Ð¡urrency code:
	//
	//   * `USD` - US dollar, default if the parameter is not specified.
	//   * `BTC` - Bitcoin.
	//   * `ETH` - Ethereum.
	Currency *string `json:"currency,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// addresses// (GET /admin/migration/addresses)
	GetMigrationAddresses(ctx echo.Context, params GetMigrationAddressesParams) error
	// addresses/count// (GET /admin/migration/addresses/count)
	GetMigrationAddressCount(ctx echo.Context) error
	// statistics// (GET /api/statistics)
	GetStatistics(ctx echo.Context) error
	// token// (GET /api/token)
	TokenGetInfo(ctx echo.Context, params TokenGetInfoParams) error
	// token/weekPrices// (GET /api/token/weekPrices/{interval})
	TokenWeekPrice(ctx echo.Context, interval int) error
	// transaction details// (GET /api/transaction/{txID}/details)
	TransactionsDetails(ctx echo.Context, txID string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetMigrationAddresses converts echo context to params.
func (w *ServerInterfaceWrapper) GetMigrationAddresses(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMigrationAddressesParams
	// ------------- Optional query parameter "migrationAddress" -------------
	if paramValue := ctx.QueryParam("migrationAddress"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "migrationAddress", ctx.QueryParams(), &params.MigrationAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter migrationAddress: %s", err))
	}

	// ------------- Required query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument limit is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMigrationAddresses(ctx, params)
	return err
}

// GetMigrationAddressCount converts echo context to params.
func (w *ServerInterfaceWrapper) GetMigrationAddressCount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMigrationAddressCount(ctx)
	return err
}

// GetStatistics converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatistics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatistics(ctx)
	return err
}

// TokenGetInfo converts echo context to params.
func (w *ServerInterfaceWrapper) TokenGetInfo(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TokenGetInfoParams
	// ------------- Optional query parameter "currency" -------------
	if paramValue := ctx.QueryParam("currency"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency", ctx.QueryParams(), &params.Currency)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TokenGetInfo(ctx, params)
	return err
}

// TokenWeekPrice converts echo context to params.
func (w *ServerInterfaceWrapper) TokenWeekPrice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "interval" -------------
	var interval int

	err = runtime.BindStyledParameter("simple", false, "interval", ctx.Param("interval"), &interval)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter interval: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TokenWeekPrice(ctx, interval)
	return err
}

// TransactionsDetails converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionsDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txID" -------------
	var txID string

	err = runtime.BindStyledParameter("simple", false, "txID", ctx.Param("txID"), &txID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionsDetails(ctx, txID)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/admin/migration/addresses", wrapper.GetMigrationAddresses)
	router.GET("/admin/migration/addresses/count", wrapper.GetMigrationAddressCount)
	router.GET("/api/statistics", wrapper.GetStatistics)
	router.GET("/api/token", wrapper.TokenGetInfo)
	router.GET("/api/token/weekPrices/:interval", wrapper.TokenWeekPrice)
	router.GET("/api/transaction/:txID/details", wrapper.TransactionsDetails)

}

